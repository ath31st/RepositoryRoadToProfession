type: edu
custom_name: Menu, please!
files:
- name: src/editor/ApplicationRunner.java
  visible: true
  text: |
    package editor;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new TextEditor();
        }
    }
  learner_created: false
- name: src/editor/TextEditor.java
  visible: true
  text: |
    package editor;

    import javax.swing.*;

    public class TextEditor extends JFrame {
        public TextEditor() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: test/EditorTest.java
  visible: false
  text: |
    import editor.TextEditor;
    import org.assertj.swing.exception.ActionFailedException;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JMenuItemFixture;
    import org.assertj.swing.fixture.JScrollPaneFixture;
    import org.assertj.swing.fixture.JTextComponentFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import org.junit.After;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class EditorTest extends SwingTest {
        public EditorTest() {
            super(new TextEditor());
        }

        @SwingComponent private JTextComponentFixture textArea;
        @SwingComponent private JTextComponentFixture filenameField;
        @SwingComponent private JButtonFixture saveButton;
        @SwingComponent private JButtonFixture loadButton;
        @SwingComponent private JScrollPaneFixture scrollPane;
        @SwingComponent private JMenuItemFixture menuFile;
        @SwingComponent private JMenuItemFixture menuLoad;
        @SwingComponent private JMenuItemFixture menuSave;
        @SwingComponent private JMenuItemFixture menuExit;

        String filename1 = "SomeFile.txt";
        String filename2 = "AnotherFile.txt";
        String noExistFile = "FileDoesNotExist";

        String textToSave1 = "Basic text editor\nType here too\nHere also\n\n";
        String textToSave2 = "                Sonnet I\n" +
            "     \n" +
            "     \n" +
            "FROM fairest creatures we desire increase,\n" +
            "That thereby beauty's rose might never die,\n" +
            "But as the riper should by time decease,\n" +
            "His tender heir might bear his memory:\n" +
            "But thou, contracted to thine own bright eyes,\n" +
            "Feed'st thy light'st flame with self-substantial fuel,\n" +
            "Making a famine where abundance lies,\n" +
            "Thyself thy foe, to thy sweet self too cruel.\n" +
            "Thou that art now the world's fresh ornament\n" +
            "And only herald to the gaudy spring,\n" +
            "Within thine own bud buriest thy content\n" +
            "And, tender churl, makest waste in niggarding.\n" +
            "Pity the world, or else this glutton be,\n" +
            "To eat the world's due, by the grave and thee.\n" +
            "\n" +
            "                 Sonnet II                   \n" +
            "\n" +
            "\n" +
            "When forty winters shall beseige thy brow,\n" +
            "And dig deep trenches in thy beauty's field,\n" +
            "Thy youth's proud livery, so gazed on now,\n" +
            "Will be a tatter'd weed, of small worth held:\n" +
            "Then being ask'd where all thy beauty lies,\n" +
            "Where all the treasure of thy lusty days,\n" +
            "To say, within thine own deep-sunken eyes,\n" +
            "Were an all-eating shame and thriftless praise.\n" +
            "How much more praise deserved thy beauty's use,\n" +
            "If thou couldst answer 'This fair child of mine\n" +
            "Shall sum my count and make my old excuse,'\n" +
            "Proving his beauty by succession thine!\n" +
            "This were to be new made when thou art old,\n" +
            "And see thy blood warm when thou feel'st it cold.";

        @DynamicTest
        CheckResult test1() {
            requireEditable(textArea);
            requireEmpty(textArea, filenameField);
            requireEnabled(saveButton, loadButton);
            return correct();
        }

        @DynamicTest(feedback = "Can't enter multiline text in TextArea.")
        CheckResult test2() {
            textArea.setText(textToSave1);
            textArea.requireText(textToSave1);
            textArea.setText("");
            textArea.setText(textToSave2);
            textArea.requireText(textToSave2);
            return correct();
        }

        @DynamicTest(feedback = "Can enter multiline text in FilenameField, but shouldn't")
        CheckResult test3() {
            String text = textToSave1;
            filenameField.setText(text);
            filenameField.requireText(text.replace("\n", " "));
            filenameField.setText("");
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField and in TextArea " +
            "should stay the same after saving file")
        CheckResult test4() {
            filenameField.setText(filename1);
            textArea.setText(textToSave1);

            saveButton.click();

            filenameField.requireText(filename1);
            textArea.requireText(textToSave1);
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField and in TextArea " +
            "should stay the same after saving file")
        CheckResult test5() {
            String text = textToSave2;
            String file = filename2;

            filenameField.setText(file);
            textArea.setText(text);

            saveButton.click();

            filenameField.requireText(file);
            textArea.requireText(text);

            filenameField.setText("");
            textArea.setText("");
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField stay the same after loading file")
        CheckResult test6() {
            String file = filename1;

            filenameField.setText(file);
            textArea.setText("");

            loadButton.click();

            filenameField.requireText(file);

            filenameField.setText("");
            textArea.setText("");
            return correct();
        }

        @DynamicTest(feedback = "Text should be the same after saving and loading same file")
        CheckResult test7() {
            String[] texts = {textToSave2, textToSave1};
            String[] files = {filename1, filename2};

            for (int i = 0; i < 2; i++) {

                String text = texts[i];
                String file = files[i];

                filenameField.setText("");
                textArea.setText("");

                filenameField.setText(file);
                textArea.setText(text);

                saveButton.click();

                filenameField.setText("");
                textArea.setText("");

                filenameField.setText(file);
                loadButton.click();

                textArea.requireText(text);
            }
            return correct();
        }

        @DynamicTest(feedback = "TextArea should be empty if user tries to " +
            "load file that doesn't exist")
        CheckResult test8() {
            textArea.setText(textToSave1);
            filenameField.setText(noExistFile);

            loadButton.click();
            textArea.requireText("");
            return correct();
        }

        @DynamicTest(feedback = "TextArea should correctly save and load an empty file")
        CheckResult test9() {
            textArea.setText("");
            filenameField.setText(filename1);

            saveButton.click();
            textArea.setText(textToSave2);
            loadButton.click();
            textArea.requireText("");
            return correct();
        }

        // menu-related tests

        @DynamicTest
        CheckResult test10() {
            requireEnabled(menuLoad, menuSave, menuFile, menuExit);
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField and in TextArea " +
            "should stay the same after saving file using MenuSave")
        CheckResult test11() {
            filenameField.setText(filename1);
            textArea.setText(textToSave1);

            try {
                menuSave.click();
            } catch (ActionFailedException e) {
                return CheckResult.wrong("Make sure that the JMenu and it's respective JMenuItem are present and clickable.");
            }

            filenameField.requireText(filename1);
            textArea.requireText(textToSave1);
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField and in TextArea " +
            "should stay the same after saving file using MenuSave")
        CheckResult test12() {
            String text = textToSave2;
            String file = filename2;

            filenameField.setText(file);
            textArea.setText(text);

            menuSave.click();

            filenameField.requireText(file);
            textArea.requireText(text);

            filenameField.setText("");
            textArea.setText("");
            return correct();
        }

        @DynamicTest(feedback = "Text in FilenameField stay " +
            "the same after loading file using MenuLoad")
        CheckResult test13() {
            String file = filename1;

            filenameField.setText(file);
            textArea.setText("");

            menuLoad.click();

            filenameField.requireText(file);

            filenameField.setText("");
            textArea.setText("");
            return correct();
        }

        @DynamicTest(feedback = "Text should be the same after saving " +
            "and loading same file using MenuLoad")
        CheckResult test14() {
            String[] texts = {textToSave2, textToSave1};
            String[] files = {filename1, filename2};

            for (int i = 0; i < 2; i++) {

                String text = texts[i];
                String file = files[i];

                filenameField.setText("");
                textArea.setText("");

                filenameField.setText(file);
                textArea.setText(text);

                menuSave.click();

                filenameField.setText("");
                textArea.setText("");

                filenameField.setText(file);
                menuLoad.click();

                textArea.requireText(text);
            }
            return correct();
        }

        @DynamicTest(feedback = "TextArea should be empty if user tries to " +
            "load file that doesn't exist using MenuLoad")
        CheckResult test15() {
            textArea.setText(textToSave1);
            filenameField.setText(noExistFile);

            menuLoad.click();
            textArea.requireText("");
            return correct();
        }

        @DynamicTest(feedback = "TextArea should correctly save and load an empty file using menu")
        CheckResult test16() {
            textArea.setText("");
            filenameField.setText(filename1);

            menuSave.click();
            textArea.setText(textToSave2);
            menuLoad.click();
            textArea.requireText("");
            return correct();
        }

        @After
        public void deleteFiles() {
            try {
                Files.delete(Paths.get(filename1));
                Files.delete(Paths.get(filename2));
            }
            catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5260#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 16 May 2022 15:48:02 UTC
record: 3
