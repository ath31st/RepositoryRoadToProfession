type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/service/PaymentService.java
  visible: true
  text: |
    package account.service;

    import account.entites.Payment;
    import account.entites.User;
    import account.exceptionhandler.*;
    import account.repository.PaymentRepository;
    import account.repository.UserRepository;
    import account.util.EmployeePaymentResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.time.DateTimeException;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.*;

    @Service
    public class PaymentService {
        @Autowired
        private PaymentRepository paymentRepository;
        @Autowired
        private UserRepository userRepository;

        public ResponseEntity<Map<String, String>> addPaymentsIntoDb(List<Payment> paymentList) {
            checkValidatePayment(paymentList);
            paymentList.forEach(paymentRepository::save);
            return ResponseEntity.ok().body(Map.of("status", "Added successfully!"));
        }

        public ResponseEntity<Map<String, String>> putPaymentChanges(Payment payment) {
            checkExistsEmployee(payment);
            checkCorrectSalary(payment);
            Payment paymentFromDb = paymentRepository
                    .findPaymentByEmployeeIgnoreCaseAndPeriod(payment.getEmployee(), payment.getPeriod())
                    .orElseThrow(EmployeeNotFoundException::new);
            paymentFromDb.setSalary(payment.getSalary());
            paymentRepository.save(paymentFromDb);
            return ResponseEntity.ok().body(Map.of("status", "Updated successfully!"));
        }

        public ResponseEntity getPaymentForPeriod(String period, User user) {
            if (period == null) {
                List<Payment> payments = paymentRepository.findPaymentByEmployeeIgnoreCase(user.getEmail());
                payments.sort(Comparator.comparing(Payment::getPeriod).reversed());
                List<EmployeePaymentResponse> responses = new ArrayList<>();
                for (Payment payment : payments) {
                    responses.add(createResponse(payment, user));
                }
                return ResponseEntity.ok().body(responses);
            } else {
                Payment payment = paymentRepository.findPaymentByEmployeeIgnoreCaseAndPeriod(user.getEmail(), getYearMonthFromString(period))
                        .orElseThrow(PaymentNotFoundException::new);
                EmployeePaymentResponse response = createResponse(payment, user);
                return ResponseEntity.ok().body(response);
            }
        }

        private EmployeePaymentResponse createResponse(Payment payment, User user) {
            DateTimeFormatter english = DateTimeFormatter.ofPattern("MMMM-yyyy", Locale.ENGLISH);
            EmployeePaymentResponse response = new EmployeePaymentResponse();
            response.setName(user.getUsername());
            response.setLastname(user.getLastname());
            response.setPeriod(payment.getPeriod().format(english));
            response.setSalary(String.format("%d dollar(s) %d cent(s)", payment.getSalary() / 100, payment.getSalary() % 100));
            return response;
        }


        private List<Payment> getAllPaymentsByEmployee(String emailEmployee) {
            return paymentRepository.findPaymentByEmployeeIgnoreCase(emailEmployee);
        }

        private void checkValidatePayment(List<Payment> paymentList) {
            for (Payment payment : paymentList) {
                checkCorrectSalary(payment);
                checkExistsEmployee(payment);
                checkDuplicatePayments(payment);
            }
        }

        private void checkCorrectSalary(Payment payment) {
            if (payment.getSalary() < 0) {
                throw new SalaryException();
            }
        }

        private void checkExistsEmployee(Payment payment) {
            if (userRepository.findUserByEmailIgnoreCase(payment.getEmployee()).isEmpty()) {
                throw new EmployeeNotFoundException();
            }
        }

        private void checkDuplicatePayments(Payment payment) {
            List<Payment> payments = getAllPaymentsByEmployee(payment.getEmployee());
            if (payments.stream().anyMatch(payment::equals)) {
                throw new DuplicatePaymentException();
            }
        }

        private YearMonth getYearMonthFromString(String period) {
            YearMonth per = null;
            try {
                per = YearMonth.parse(period, DateTimeFormatter.ofPattern("MM-yyyy"));
            } catch (DateTimeException e) {
                throw new WrongPeriodException();
            }
            return per;
        }
    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |
    package account.config;

    import account.exceptionhandler.CustomAccessDeniedHandler;
    import account.util.Role;
    import account.exceptionhandler.RestAuthenticationEntryPoint;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
        @Autowired
        DaoAuthenticationProvider authenticationProvider;
        @Autowired
        private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)// Handle auth error
                    .and()
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests()
                    .antMatchers("/api/auth/singup").permitAll()
                    .antMatchers("/api/auth/changepass").hasAnyAuthority(Role.ROLE_ADMINISTRATOR.name(),Role.ROLE_USER.name(),Role.ROLE_ACCOUNTANT.name())
                    .antMatchers("/api/empl/payment").hasAnyAuthority(Role.ROLE_USER.name(),Role.ROLE_ACCOUNTANT.name())
                    .antMatchers("/api/acct/payments").hasAuthority(Role.ROLE_ACCOUNTANT.name())
                    .antMatchers("/api/admin/**").hasAuthority(Role.ROLE_ADMINISTRATOR.name())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Override
        public void configure(AuthenticationManagerBuilder auth) {
            auth.authenticationProvider(authenticationProvider);
        }
        @Bean
        public AccessDeniedHandler accessDeniedHandler(){
            return new CustomAccessDeniedHandler();
        }
    }
  learner_created: true
- name: src/account/service/RoleService.java
  visible: true
  text: |
    package account.service;

    import account.entites.User;
    import account.repository.UserRepository;
    import account.util.Operation;
    import account.util.Role;
    import account.util.RoleChangeRequest;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.*;

    @Service
    public class RoleService {
        @Autowired
        private UserRepository userRepository;

        public ResponseEntity<User> changeUserRole(RoleChangeRequest roleChangeRequest) {
            User user = userRepository.findUserByEmailIgnoreCase(roleChangeRequest.getUser()).orElseThrow(
                    () -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!")
            );

            String stringRoleFromReq = "ROLE_" + roleChangeRequest.getRole().toUpperCase();
            String stringOperationFromReq = roleChangeRequest.getOperation().toUpperCase();

            checkExistingRole(stringRoleFromReq);
            checkExistingOperation(stringOperationFromReq);

            Role roleFromReq = Role.valueOf(stringRoleFromReq);
            Operation operationFromReq = Operation.valueOf(stringOperationFromReq);

            if (operationFromReq.equals(Operation.GRANT)) {
                grantOperation(user, roleFromReq);
            } else if (operationFromReq.equals(Operation.REMOVE)) {
                removeOperation(user, roleFromReq);
            }
            userRepository.save(user);
            return ResponseEntity.ok().body(user);
        }

        private void grantOperation(User user, Role roleFromReq) {
            List<Role> roles = user.getRoles();

            checkCompatibleRoles(roles, roleFromReq);
            checkExistingRoleUserForGrantOperation(user, roleFromReq);

            roles.add(roleFromReq);
            roles.sort(Comparator.reverseOrder());
            user.setRoles(roles);
        }

        private void removeOperation(User user, Role roleFromReq) {

            checkAdminRole(roleFromReq);
            checkExistingRoleUserForRemoveOperation(user, roleFromReq);
            checkCountRolesUser(user);

            List<Role> roles = user.getRoles();
            roles.remove(roleFromReq);
            user.setRoles(roles);
        }

        private void checkExistingRole(String roleFromReq) {
            if (Arrays.stream(Role.values()).noneMatch(role -> role.name().equals(roleFromReq)))
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
        }


        private void checkExistingOperation(String operationFromReq) {
            if (Arrays.stream(Operation.values()).noneMatch(operation -> operation.name().equals(operationFromReq)))
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Operation not found!");
        }


        private void checkExistingRoleUserForRemoveOperation(User user, Role roleFromReq) {
            if (!user.getRoles().contains(roleFromReq)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");
            }
        }

        private void checkExistingRoleUserForGrantOperation(User user, Role roleFromReq) {
            if (user.getRoles().contains(roleFromReq)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user already have this role!");
            }
        }

        private void checkCountRolesUser(User user) {
            if (user.getRoles().size() == 1) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");
            }
        }

        private void checkAdminRole(Role roleFromReq) {
            if (roleFromReq.equals(Role.ROLE_ADMINISTRATOR)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }
        }

        private void checkCompatibleRoles(List<Role> roles, Role roleFromReq) {
            if ((roles.contains(Role.ROLE_ACCOUNTANT) | roles.contains(Role.ROLE_USER)) & roleFromReq.equals(Role.ROLE_ADMINISTRATOR)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            } else if (roles.contains(Role.ROLE_ADMINISTRATOR) & (roleFromReq.equals(Role.ROLE_ACCOUNTANT)) | roleFromReq.equals(Role.ROLE_USER)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }
        }
    }
  learner_created: true
- name: src/account/exceptionhandler/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.entites.User;
    import account.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/auth")
    public class AuthController {
        @Autowired
        private UserService userService;

        @PostMapping("/signup")
        public ResponseEntity<User> registerUser(@Valid @RequestBody User user) {
            return ResponseEntity.ok().body(userService.registerNewUser(user));
        }

        @PostMapping("/changepass")
        public ResponseEntity changeUserPass(@RequestBody Map<String,String> newPassword, @AuthenticationPrincipal User user) {
            return userService.changePassword(newPassword.get("new_password"),user);
        }
    }
  learner_created: true
- name: src/account/controller/BusinessFuncController.java
  visible: true
  text: |
    package account.controller;

    import account.entites.Payment;
    import account.service.PaymentService;
    import account.service.UserService;
    import account.entites.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/api")
    class BusinessFuncController {

        @Autowired
        private UserService userService;
        @Autowired
        private PaymentService paymentService;


        @GetMapping("/empl/payment")
        public ResponseEntity getPaymentForPeriod(@RequestParam(value = "period",required = false) String period, @AuthenticationPrincipal User user) {
            return paymentService.getPaymentForPeriod(period, user);
        }

        @PostMapping("/acct/payments")
        public ResponseEntity uploadsPayrolls(@RequestBody List<Payment> paymentList) {
            return paymentService.addPaymentsIntoDb(paymentList);
        }

        @PutMapping("/acct/payments")
        public ResponseEntity updatePaymentinfo(@RequestBody Payment payment) {
            return paymentService.putPaymentChanges(payment);
        }
    }
  learner_created: true
- name: src/account/exceptionhandler/CustomAccessDeniedHandler.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.time.LocalDateTime;
    import java.util.HashMap;
    import java.util.Map;

    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        private ObjectMapper objectMapper = new ObjectMapper();

        @Override
        public void handle(
                HttpServletRequest request,
                HttpServletResponse response,
                AccessDeniedException accessDeniedException)
                throws IOException {

            response.setStatus(HttpStatus.FORBIDDEN.value());
            Map<String, Object> data = new HashMap<>();
            data.put("timestamp", LocalDateTime.now().toString());
            data.put("status", 403);
            data.put("message", "Access Denied!");
            data.put("error", "Forbidden");
            data.put("path", request.getRequestURI());
            response.getOutputStream()
                    .println(objectMapper.writeValueAsString(data));
        }
    }
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  text: |
    package account.repository;

    import account.entites.Payment;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.time.YearMonth;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends CrudRepository<Payment, Long> {
        List<Payment> findPaymentByEmployeeIgnoreCase(String email);

        Optional<Payment> findPaymentByEmployeeIgnoreCaseAndPeriod(String email, YearMonth period);

    }
  learner_created: true
- name: src/account/util/Operation.java
  visible: true
  text: |
    package account.util;

    public enum Operation {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/entites/User.java
  visible: true
  text: |
    package account.entites;

    import account.util.Role;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.*;

    @Entity
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "id", nullable = false)
        private Long id;
        @JsonProperty("name")
        @NotEmpty
        private String username;
        @NotEmpty
        private String lastname;
        @Pattern(regexp = "^([\\w-]+(?:\\.[\\w-]+)*)@(acme.com)$")
        @NotBlank
        @NotNull
        private String email;
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @NotNull
        @NotBlank
        private String password;

        @Enumerated(EnumType.STRING)
        @ElementCollection(fetch = FetchType.EAGER)
        private List<Role> roles;
        @JsonIgnore
        private boolean accountNonExpired;
        @JsonIgnore
        private boolean accountNonLocked;
        @JsonIgnore
        private boolean credentialsNonExpired;
        @JsonIgnore
        private boolean enabled;

        public User() {
            this.accountNonExpired = true;
            this.accountNonLocked = true;
            this.credentialsNonExpired = true;
            this.enabled = true;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return accountNonExpired;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return credentialsNonExpired;
        }

        @Override
        public boolean isEnabled() {
            return enabled;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public void grantAuthority(Role authority) {
            if (roles == null) roles = new LinkedList<>();
            roles.add(authority);
        }
        @JsonIgnore
        @Override
        public List<GrantedAuthority> getAuthorities() {
            List<GrantedAuthority> authorities = new ArrayList<>();
            roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role.toString())));
            return authorities;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRoles() {
            return roles;
        }

        public void setRoles(List<Role> roles) {
            this.roles = roles;
        }
    }
  learner_created: true
- name: src/account/config/BeanConfig.java
  visible: true
  text: |
    package account.config;

    import account.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import java.util.List;

    @Configuration
    public class BeanConfig {
        @Autowired
        private UserService userService;

        @Bean
        public DaoAuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(getEncoder());
            provider.setUserDetailsService(userService);
            return provider;
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Bean
        public List<String> getBreachedPasswords() {
            return List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
        }

    }
  learner_created: true
- name: src/account/util/Role.java
  visible: true
  text: |-
    package account.util;

    public enum Role {
        ROLE_USER,
        ROLE_ADMINISTRATOR,
        ROLE_ACCOUNTANT,
        ACCOUNTANT,
        USER,
        ADMINISTRATOR
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |-
    package account.repository;

    import account.entites.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findUserByEmailIgnoreCase(String email);
    }
  learner_created: true
- name: src/account/controller/ServiceFuncController.java
  visible: true
  text: |
    package account.controller;

    import account.entites.User;
    import account.service.RoleService;
    import account.service.UserService;
    import account.util.RoleChangeRequest;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/admin")
    public class ServiceFuncController {

        @Autowired
        private UserService userService;
        @Autowired
        private RoleService roleService;

        @PutMapping("/user/role")
        public ResponseEntity<User> changeUserRole(@RequestBody @Valid RoleChangeRequest roleChangeRequest) {
            return roleService.changeUserRole(roleChangeRequest);
        }

        @DeleteMapping("/user/{email}")
        public ResponseEntity<Map<String, String>> deleteUser(@PathVariable String email) {
           return userService.deleteUser(email);
        }

        @GetMapping("/user")
        public ResponseEntity<List<User>> getUsersInfo() {
            return userService.getUsersInfo();
        }
    }
  learner_created: true
- name: src/account/entites/Payment.java
  visible: true
  text: |
    package account.entites;

    import account.util.YearMonthDateAttributeConverter;
    import com.fasterxml.jackson.annotation.JsonFormat;

    import javax.persistence.*;
    import java.time.YearMonth;
    import java.util.Objects;

    @Entity
    public class Payment {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "id", nullable = false)
        private Long id;
        @Column
        private String employee;
        @Column
        @Convert(converter = YearMonthDateAttributeConverter.class)
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MM-yyyy")
        private YearMonth period;
        @Column
        private Long salary;


        public Payment() {
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }


        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public YearMonth getPeriod() {
            return period;
        }

        public void setPeriod(YearMonth period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Payment payment = (Payment) o;
            return Objects.equals(employee, payment.employee) && Objects.equals(period, payment.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employee, period);
        }
    }
  learner_created: true
- name: src/account/util/YearMonthDateAttributeConverter.java
  visible: true
  text: |-
    package account.util;

    import javax.persistence.AttributeConverter;
    import javax.persistence.Converter;
    import java.sql.Date;
    import java.time.Instant;
    import java.time.YearMonth;
    import java.time.ZoneId;

    @Converter
    public class YearMonthDateAttributeConverter
            implements AttributeConverter<YearMonth, Date> {

        @Override
        public Date convertToDatabaseColumn(
                YearMonth attribute) {
            if (attribute != null) {
                return Date.valueOf(
                        attribute.atDay(1)
                );
            }
            return null;
        }

        @Override
        public YearMonth convertToEntityAttribute(
                Date dbData) {
            if (dbData != null) {
                return YearMonth.from(
                        Instant
                                .ofEpochMilli(dbData.getTime())
                                .atZone(ZoneId.systemDefault())
                                .toLocalDate()
                );
            }
            return null;
        }
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account.service;

    import account.repository.UserRepository;
    import account.util.Role;
    import account.entites.User;
    import account.exceptionhandler.BreachedPasswordException;
    import account.exceptionhandler.InvalidLengthPasswordException;
    import account.exceptionhandler.RepetitivePasswordException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        @Autowired
        private final UserRepository userRepository;
        @Autowired
        private List<String> breachedPasswords;
        @Autowired
        private PasswordEncoder passwordEncoder;

        public UserService(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        public User findByEmail(String email) {
            return userRepository.findUserByEmailIgnoreCase(email.toLowerCase())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
        }

        public User registerNewUser(User user) {
            user.setEmail(user.getEmail().toLowerCase());
            checkValidPassword(user.getPassword());
            if (userRepository.count() == 0) {
                user.grantAuthority(Role.ROLE_ADMINISTRATOR);
                user.setPassword(passwordEncoder.encode(user.getPassword()));
                userRepository.save(user);
            } else if (userRepository.findUserByEmailIgnoreCase(user.getEmail()).isEmpty()) {
                user.grantAuthority(Role.ROLE_USER);
                user.setPassword(passwordEncoder.encode(user.getPassword()));
                userRepository.save(user);
            } else throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            return user;
        }

        public ResponseEntity changePassword(String newPassword, User authUser) {
            checkValidPassword(newPassword);
            checkDifferencePasswords(newPassword, authUser.getPassword());
            User tmpUser = userRepository.findUserByEmailIgnoreCase(authUser.getEmail()).get();
            tmpUser.setPassword(passwordEncoder.encode(newPassword));
            userRepository.save(tmpUser);
            return ResponseEntity.ok().body(Map.of("email", authUser.getEmail(), "status", "The password has been updated successfully"));
        }

        public ResponseEntity<List<User>> getUsersInfo() {
            List<User> users = new ArrayList<>();
            userRepository.findAll().iterator().forEachRemaining(users::add);
            return ResponseEntity.ok().body(users);
        }

        public ResponseEntity<Map<String, String>> deleteUser(String email) {
            User user = userRepository.findUserByEmailIgnoreCase(email)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,"User not found!"));
            if (user.getRoles().contains(Role.ROLE_ADMINISTRATOR))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            userRepository.delete(user);
            return ResponseEntity.ok().body(Map.of("user", user.getEmail(), "status", "Deleted successfully!"));
        }

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findUserByEmailIgnoreCase(email);

            if (user.isPresent()) {
                return user.get();
            } else {
                throw new UsernameNotFoundException(String.format("Username[%s] not found", email));
            }
        }

        private void checkValidPassword(String password) {
            if (password == null || password.length() < 12) {
                throw new InvalidLengthPasswordException();
            }
            if (breachedPasswords.contains(password)) {
                throw new BreachedPasswordException();
            }
        }

        private void checkDifferencePasswords(String newPassword, String oldPassword) {
            if (passwordEncoder.matches(newPassword, oldPassword)) {
                throw new RepetitivePasswordException();
            }
        }
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/BreachedPasswordException.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPasswordException extends RuntimeException {}
  learner_created: true
- name: src/account/exceptionhandler/exception/DuplicatePaymentException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Payment already exists!")
    public class DuplicatePaymentException extends RuntimeException{
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/EmployeeNotFoundException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Employee not found!")
    public class EmployeeNotFoundException extends RuntimeException{
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/InvalidLengthPasswordException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
    public class InvalidLengthPasswordException extends RuntimeException{
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/PaymentNotFoundException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST,reason = "Payment by this period not found")
    public class PaymentNotFoundException extends RuntimeException{
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/RepetitivePasswordException.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class RepetitivePasswordException extends RuntimeException {}
  learner_created: true
- name: src/account/exceptionhandler/exception/SalaryException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST,reason = "Salary must be non negative!")
    public class SalaryException extends RuntimeException {
    }
  learner_created: true
- name: src/account/exceptionhandler/exception/WrongPeriodException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Wrong period!")
    public class WrongPeriodException extends RuntimeException {
    }
  learner_created: true
- name: src/account/dto/EmployeePaymentResponse.java
  visible: true
  text: |
    package account.util;

    import org.springframework.stereotype.Component;

    @Component
    public class EmployeePaymentResponse {
        private String name;
        private String lastname;
        private String  period;
        private String salary;

        public EmployeePaymentResponse() {
        }

        public EmployeePaymentResponse(String name, String lastname, String period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public void setPeriod(String  period) {
            this.period = period;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public String getLastname() {
            return lastname;
        }

        public String getPeriod() {
            return period;
        }

        public String getSalary() {
            return salary;
        }
    }
  learner_created: true
- name: src/account/dto/RoleChangeRequest.java
  visible: true
  text: |
    package account.util;

    public class RoleChangeRequest {
        private String user;
        private String role;
        private String operation;

        public RoleChangeRequest() {
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/controller/SecurityController.java
  visible: true
  learner_created: true
- name: src/account/service/SecurityService.java
  visible: true
  learner_created: true
- name: src/account/dto/UserStatusChangeRequest.java
  visible: true
  learner_created: true
- name: src/account/dto/UserStatusChangeResponse.java
  visible: true
  learner_created: true
- name: src/account/dto/DeleteUserResponse.java
  visible: true
  learner_created: true
- name: src/account/dto/ChangeUserPasswordResponse.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Failed
feedback:
  message: "Wrong answer in test #4\n\nGET /api/security/events/ should respond with\
    \ status code 200, responded: 404\n&#39;CREATE_USER&#39; security event missing\n\
    Response body:\n{\r\n  &quot;timestamp&quot; : &quot;2022-05-30T12:30:16.040+00:00&quot;,\r\
    \n  &quot;status&quot; : 404,\r\n  &quot;error&quot; : &quot;Not Found&quot;,\r\
    \n  &quot;message&quot; : &quot;No message available&quot;,\r\n  &quot;path&quot;\
    \ : &quot;/api/security/events/&quot;\r\n}\n\nPlease find below the output of\
    \ your program during this failed test.\n\n---\n\n.   ____          _        \
    \    __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ |\
    \ &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | ||\
    \ (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\
    \ :: Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-05-30 15:30:09.792  INFO 17012\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on Fractal with PID 17012 (started by Fractal in D:\\RepositoryRoadToProfession\\\
    Account Service\\Account Service\\task)\n2022-05-30 15:30:09.798  INFO 17012 ---\
    \ [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-05-30 15:30:11.024  INFO\
    \ 17012 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-05-30 15:30:11.109  INFO\
    \ 17012 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 70ms. Found 2 JPA repository interfaces.\n\
    2022-05-30 15:30:11.858  INFO 17012 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-05-30 15:30:11.875  INFO\
    \ 17012 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-05-30 15:30:11.876  INFO 17012 --- [    Test worker]\
    \ org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache\
    \ Tomcat/9.0.36]\n2022-05-30 15:30:12.041  INFO 17012 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring embedded WebApplicationContext\n2022-05-30 15:30:12.042\
    \  INFO 17012 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 2173 ms\n2022-05-30\
    \ 15:30:12.198  INFO 17012 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2022-05-30 15:30:12.452  INFO 17012 ---\
    \ [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 -\
    \ Start completed.\n2022-05-30 15:30:12.468  INFO 17012 --- [    Test worker]\
    \ o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;.\
    \ Database available at &#39;jdbc:h2:file:../service_db&#39;\n2022-05-30 15:30:12.636\
    \  INFO 17012 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  :\
    \ Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-05-30 15:30:12.710\
    \  INFO 17012 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  :\
    \ HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-05-30 15:30:12.780\
    \  WARN 17012 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-05-30 15:30:12.812  INFO 17012 --- [         task-1]\
    \ org.hibernate.Version                    : HHH000412: Hibernate ORM core version\
    \ 5.4.17.Final\n2022-05-30 15:30:13.048  INFO 17012 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56266bda,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@5a82bc58,\
    \ org.springframework.security.web.header.HeaderWriterFilter@58fbcb71, org.springframework.security.web.authentication.logout.LogoutFilter@28ce75ec,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7d1cb59f,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6210666c,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@65af05b2,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@18bb1b88,\
    \ org.springframework.security.web.session.SessionManagementFilter@5cbe95b1, org.springframework.security.web.access.ExceptionTranslationFilter@6a1d1467,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1857fe6c]\n\
    2022-05-30 15:30:13.091  INFO 17012 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-05-30 15:30:13.289\
    \  INFO 17012 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-05-30 15:30:14.310\
    \  INFO 17012 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       :\
    \ HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-05-30 15:30:14.322  INFO 17012 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-05-30 15:30:14.394  INFO 17012 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2022-05-30\
    \ 15:30:14.455  INFO 17012 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-05-30\
    \ 15:30:14.456  INFO 17012 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-05-30\
    \ 15:30:14.792  INFO 17012 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-05-30 15:30:14.805  INFO 17012\
    \ --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 5.42 seconds (JVM running for 6.696)\n2022-05-30 15:30:15.170  INFO 17012\
    \ --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-05-30 15:30:15.170\
    \  INFO 17012 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2022-05-30 15:30:15.180  INFO\
    \ 17012 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 10 ms"
  time: Mon, 30 May 2022 12:30:16 UTC
record: -1
