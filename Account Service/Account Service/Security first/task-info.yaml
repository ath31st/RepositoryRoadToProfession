type: edu
custom_name: Security first!
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, String> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, String value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String paymentApi = "/api/empl/payment";
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();

      private final String jDShortPass1 = new TestReq().setProps("new_password", "o").toJson();
      private final String jDShortPass2 = new TestReq().setProps("new_password", "oM").toJson();
      private final String jDShortPass3 = new TestReq().setProps("new_password", "oMo").toJson();
      private final String jDShortPass4 = new TestReq().setProps("new_password", "oMoa").toJson();
      private final String jDShortPass5 = new TestReq().setProps("new_password", "oMoa3").toJson();
      private final String jDShortPass6 = new TestReq().setProps("new_password", "oMoa3V").toJson();
      private final String jDShortPass7 = new TestReq().setProps("new_password", "oMoa3Vv").toJson();
      private final String jDShortPass8 = new TestReq().setProps("new_password", "oMoa3Vvq").toJson();
      private final String jDShortPass9 = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDShortPass10 = new TestReq().setProps("new_password", "oMoa3Vvqno").toJson();
      private final String jDShortPass11 = new TestReq().setProps("new_password", "oMoa3VvqnoM").toJson();


      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() == 404) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Endpoint not found!" + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user, String answer) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", answer));
        }
        if (status == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", answer)
                          .value("path", "/api/auth/changepass")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + getPrettyJson(json) + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
              // Test user registration on signup api
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"),
              () -> testPostSignUpResponse(jDCorrectUser, 200),
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(jDCorrectUser),
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMusLower, 200),
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"),
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMusLower, 200, "User must login!"),
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),
              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
              () -> testChangePassword(changePassApi, jDShortPass1, 400, jDCorrectUser,
                      "Password length must be 12 chars minimum!"),
              () -> testChangePassword(changePassApi, jDDuplicatePass, 400, jDCorrectUser,
                      "The passwords must be different!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass1, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass2, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass3, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass4, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass5, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass6, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass7, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass8, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass9, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass10, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass11, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"),
              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"JohnDoe@acme.com",
                      "oMoa3VvqnLxW", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"JohnDoe@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!"),
              () -> testChangePassword(changePassApi, jDPass, 200, maxMusCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"MaxMustermann@acme.com",
                      "ai0y9bMvyF6G", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"MaxMustermann@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!")
      };
    }
  learner_created: false
- name: src/account/UserService.java
  visible: true
  text: |
    package account;

    import account.entites.Role;
    import account.entites.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        @Autowired
        private final UserRepository userRepository;
        @Autowired
        private PasswordEncoder passwordEncoder;

        public UserService(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        public User findByEmail(String email) {
            return userRepository.findUserByEmailIgnoreCase(email.toLowerCase())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
        }

        public User registerNewUser(User user) {
            user.setEmail(user.getEmail().toLowerCase());
            if (userRepository.findUserByEmailIgnoreCase(user.getEmail()).isEmpty()) {
                user.grantAuthority(Role.ROLE_USER);
                user.setPassword(passwordEncoder.encode(user.getPassword()));
                userRepository.save(user);
            } else throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            return user;
        }

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findUserByEmailIgnoreCase(email);

            if (user.isPresent()){
                return user.get();
            }else{
                throw new UsernameNotFoundException(String.format("Username[%s] not found"));
            }
        }
    }
  learner_created: true
- name: src/account/exceptionhandler/CustomResponseException.java
  visible: true
  text: |+
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.server.ResponseStatusException;

    import java.time.LocalDate;
    import java.util.Arrays;

    @ControllerAdvice
    public class CustomResponseException {
       // @ExceptionHandler
        public ResponseEntity<Response> handle400Exception(ResponseStatusException e) {
            Response response = new Response();
            response.setTimestamp(LocalDate.now());
            response.setStatus(e.getStatus().value());
            response.setError(e.getStatus().getReasonPhrase());
            response.setMessage(e.getReason());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }
    }

  learner_created: true
- name: src/account/exceptionhandler/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/controller/ServiceFuncController.java
  visible: true
  text: |
    package account.controller;

    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class ServiceFuncController {
        @PutMapping("/api/admin/user/role")
        public void changeUserRole(){

        }
        @DeleteMapping("/api/admin/user")
        public void deleteUser(){

        }
        @GetMapping("/api/admin/user")
        public void getUserInfo(){

        }
    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.entites.User;
    import account.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;

    @RestController
    public class AuthController {
        @Autowired
        private UserService userService;

        @PostMapping("/api/auth/signup")
        public ResponseEntity<User> registerUser(@Valid @RequestBody User user) {
            return ResponseEntity.ok().body(userService.registerNewUser(user));
        }

        @PostMapping("/api/auth/changepass")
        public void changeUserPass() {

        }
    }
  learner_created: true
- name: src/account/controller/BusinessFuncController.java
  visible: true
  text: |
    package account.controller;

    import account.UserService;
    import account.entites.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    @RestController
    class BusinessFuncController {

        @Autowired
        private UserService userService;

        @GetMapping("/api/empl/payment")
        public ResponseEntity<User> getPayment(@AuthenticationPrincipal User user) {
            User tmpUser = userService.findByEmail(user.getEmail());
            return new ResponseEntity<>(tmpUser, HttpStatus.OK);
        }

        @PostMapping("/api/acct/payments")
        public void uploadsPayrolls() {

        }

        @PutMapping("/api/acct/payments")
        public void updatePaymentinfo() {

        }
    }
  learner_created: true
- name: src/account/exceptionhandler/Response.java
  visible: true
  text: |
    package account.exceptionhandler;


    import java.time.LocalDate;

    public class Response {
        private LocalDate timestamp;
        private int status;
        private String error;
        private String message;

        public Response() {
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public LocalDate getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDate timestamp) {
            this.timestamp = timestamp;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

    }
  learner_created: true
- name: src/account/entites/User.java
  visible: true
  text: |
    package account.entites;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.ArrayList;
    import java.util.List;

    @Entity
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "id", nullable = false)
        private Long id;
        @JsonProperty("name")
        @NotEmpty
        private String username;
        @NotEmpty
        private String lastname;
        // @Pattern(regexp = "^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$")
        @Pattern(regexp = "^([\\w-]+(?:\\.[\\w-]+)*)@(acme.com)$")
        @NotBlank
        @NotNull
        private String email;
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @NotNull
        @NotBlank
        private String password;

        @Enumerated(EnumType.STRING)
        @ElementCollection(fetch = FetchType.EAGER)
        private List<Role> roles;
        @JsonIgnore
        private boolean accountNonExpired;
        @JsonIgnore
        private boolean accountNonLocked;
        @JsonIgnore
        private boolean credentialsNonExpired;
        @JsonIgnore
        private boolean enabled;

        public User() {
            this.accountNonExpired = true;
            this.accountNonLocked = true;
            this.credentialsNonExpired = true;
            this.enabled = true;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return accountNonExpired;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return credentialsNonExpired;
        }

        @Override
        public boolean isEnabled() {
            return enabled;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public void grantAuthority(Role authority) {
            if (roles == null) roles = new ArrayList<>();
            roles.add(authority);
        }
        @JsonIgnore
        @Override
        public List<GrantedAuthority> getAuthorities() {
            List<GrantedAuthority> authorities = new ArrayList<>();
            roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role.toString())));
            return authorities;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

    }
  learner_created: true
- name: src/account/entites/Role.java
  visible: true
  text: |-
    package account.entites;

    public enum Role {
        ROLE_USER,
        ROLE_ADMIN
    }
  learner_created: true
- name: src/account/UserRepository.java
  visible: true
  text: |-
    package account;

    import account.entites.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findUserByEmailIgnoreCase(String email);
    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |
    package account;

    import account.entites.Role;
    import account.exceptionhandler.RestAuthenticationEntryPoint;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
        @Autowired
        private UserService userService;
        @Autowired
        private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests()
                    .antMatchers("/api/auth/singup").permitAll()
                    .antMatchers("/api/empl/payment").hasAuthority(Role.ROLE_USER.toString())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Override
        public void configure(AuthenticationManagerBuilder auth) {
            auth.authenticationProvider(authenticationProvider());
        }

        @Bean
        public DaoAuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(getEncoder());
            provider.setUserDetailsService(userService);
            return provider;
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/account/config/BeanConfig.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16603#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #29

    POST /api/auth/changepass should respond with status code 400, responded: 200
    Response body:

    Request body:
    {&quot;new_password&quot;:&quot;o&quot;}

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2022-05-25 16:01:57.518  INFO 4432 --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication on Fractal with PID 4432 (started by Fractal in D:\RepositoryRoadToProfession\Account Service\Account Service\task)
    2022-05-25 16:01:57.523  INFO 4432 --- [    Test worker] account.AccountServiceApplication        : No active profile set, falling back to default profiles: default
    2022-05-25 16:01:58.640  INFO 4432 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2022-05-25 16:01:58.716  INFO 4432 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 65ms. Found 1 JPA repository interfaces.
    2022-05-25 16:01:59.394  INFO 4432 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
    2022-05-25 16:01:59.406  INFO 4432 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-05-25 16:01:59.407  INFO 4432 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2022-05-25 16:01:59.546  INFO 4432 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-05-25 16:01:59.547  INFO 4432 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1962 ms
    2022-05-25 16:01:59.696  INFO 4432 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2022-05-25 16:01:59.939  INFO 4432 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2022-05-25 16:01:59.951  INFO 4432 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;
    2022-05-25 16:02:00.113  INFO 4432 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2022-05-25 16:02:00.178  INFO 4432 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-05-25 16:02:00.232  WARN 4432 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-05-25 16:02:00.257  INFO 4432 --- [         task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.17.Final
    2022-05-25 16:02:00.488  INFO 4432 --- [         task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2022-05-25 16:02:00.490  INFO 4432 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@48e74764, org.springframework.security.web.context.SecurityContextPersistenceFilter@31d4b3e8, org.springframework.security.web.header.HeaderWriterFilter@3348c987, org.springframework.security.web.authentication.logout.LogoutFilter@31006a75, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1b94c789, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1fc1c7e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@37e55819, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@338d47b, org.springframework.security.web.session.SessionManagementFilter@5f3f3d00, org.springframework.security.web.access.ExceptionTranslationFilter@7540160e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@365bfc5f]
    2022-05-25 16:02:00.669  INFO 4432 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-05-25 16:02:01.630  INFO 4432 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-05-25 16:02:01.643  INFO 4432 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-05-25 16:02:01.731  INFO 4432 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-05-25 16:02:01.792  INFO 4432 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;
    2022-05-25 16:02:01.793  INFO 4432 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2022-05-25 16:02:02.112  INFO 4432 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2022-05-25 16:02:02.124  INFO 4432 --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication in 5.01 seconds (JVM running for 6.018)
    2022-05-25 16:02:02.436  INFO 4432 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-05-25 16:02:02.437  INFO 4432 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-05-25 16:02:02.446  INFO 4432 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
    2022-05-25 16:02:02.620  WARN 4432 --- [io-28852-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;username&#39;: rejected value []; codes [NotEmpty.user.username,NotEmpty.username,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.username,username]; arguments []; default message [username]]; default message [must not be empty]] ]
    2022-05-25 16:02:02.663  WARN 4432 --- [io-28852-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;username&#39;: rejected value [null]; codes [NotEmpty.user.username,NotEmpty.username,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.username,username]; arguments []; default message [username]]; default message [must not be empty]] ]
    2022-05-25 16:02:02.673  WARN 4432 --- [io-28852-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;lastname&#39;: rejected value []; codes [NotEmpty.user.lastname,NotEmpty.lastname,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.lastname,lastname]; arguments []; default message [lastname]]; default message [must not be empty]] ]
    2022-05-25 16:02:02.683  WARN 4432 --- [io-28852-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;lastname&#39;: rejected value [null]; codes [NotEmpty.user.lastname,NotEmpty.lastname,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.lastname,lastname]; arguments []; default message [lastname]]; default message [must not be empty]] ]
    2022-05-25 16:02:02.697  WARN 4432 --- [io-28852-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User) with 2 errors: [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value []; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@64066ce7,^([\w-]+(?:\.[\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\w-]+(?:\.[\w-]+)*)@(acme.com)$&quot;]] [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value []; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email]]; default message [must not be blank]] ]
    2022-05-25 16:02:02.708  WARN 4432 --- [io-28852-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User) with 2 errors: [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [null]; codes [NotNull.user.email,NotNull.email,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email]]; default message [must not be null]] [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [null]; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email]]; default message [must not be blank]] ]
    2022-05-25 16:02:02.717  WARN 4432 --- [io-28852-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value []; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password]]; default message [must not be blank]] ]
    2022-05-25 16:02:02.726  WARN 4432 --- [io-28852-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User) with 2 errors: [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [null]; codes [NotNull.user.password,NotNull.password,NotNull.java.lang.String,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password]]; default message [must not be null]] [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [null]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password]]; default message [must not be blank]] ]
    2022-05-25 16:02:02.737  WARN 4432 --- [io-28852-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [johndoeacme.com]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@64066ce7,^([\w-]+(?:\.[\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\w-]+(?:\.[\w-]+)*)@(acme.com)$&quot;]] ]
    2022-05-25 16:02:02.746  WARN 4432 --- [o-28852-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt; account.controller.AuthController.registerUser(account.entites.User): [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [johndoe@google.com]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@64066ce7,^([\w-]+(?:\.[\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\w-]+(?:\.[\w-]+)*)@(acme.com)$&quot;]] ]
  time: Wed, 25 May 2022 13:02:04 UTC
record: -1
