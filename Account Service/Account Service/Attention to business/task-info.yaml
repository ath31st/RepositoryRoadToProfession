type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "api/acct/payments";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 54321).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987654).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 120).toJson()
      });
      private String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});


      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", -1).toJson()});

      private String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private String updatePayment = new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private String updatePayment1 = new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
              .setProps("salary", 88777).toJson();
      private String updatePaymentResponse = new TestReq().setProps("name", "John").setProps("lastname", "Doe")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private String updatePaymentResponse1 = new TestReq().setProps("name", "John").setProps("lastname", "Doe")
              .setProps("period", "January-2021").setProps("salary", "887 dollar(s) 77 cent(s)").toJson();
      private String updatePaymentWrongDate = new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private String updatePaymentWrongSalary = new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", -1).toJson();
      private String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private String correctPaymentResponse1 = convert(new String[]{
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson()
      });
      private String correctPaymentResponse2 = convert(new String[]{
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "January-2021").setProps("salary", "887 dollar(s) 77 cent(s)").toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }


      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + getEmployeePaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String body, int status, String message) {
        HttpResponse response = post(postPaymentApi, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + postPaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String body, int status, String message) {
        HttpResponse response = put(postPaymentApi, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("PUT " + postPaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + getEmployeePaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("Payments was not added " + "\n"
                  + "endpoint " + getEmployeePaymentApi + "\n"
                  + "responded with " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
    //    if (response.getStatusCode() == 400) {
    //      expect(response.getContent()).asJson().check(
    //              isObject()
    //                      .value("error", "Bad Request")
    //                      .value("path", "/api/acct/payments")
    //                      .value("status", 400)
    //                      .anyOtherValues());
    //    }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + getEmployeePaymentApi + "?period=" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {
              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"), // 1
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"), // 2
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"), // 3
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"), // 4
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"), // 5
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"), // 6
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"), // 7
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"), // 8
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"), // 9
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"), // 10
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"), // 11
              () -> testPostSignUpResponse(jDCorrectUser, 200), // 12
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"), // 13
              () -> testUserDuplicates(jDCorrectUser), // 14
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"), // 15
              () -> testPostSignUpResponse(maxMusLower, 200), // 16
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"), // 17
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"), // 18
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"), // 19
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"), // 20
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 21
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 22
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"), // 23
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"), // 24
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 25
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 26
              () -> testGetApi(getEmployeePaymentApi, 401, "This api only for authenticated user"), // 27

              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"), // 28
              () -> testPostApiWithAuth(changePassApi, jDShortPass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"), // 29
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"), // 30
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 31
              () -> testChangePassword(changePassApi,jDPass, 200, jDCorrectUser), // 32
              () -> testGetApiAuth(getEmployeePaymentApi, 401,"JohnDoe@acme.com",
                      "oMoa3VvqnLxW", "Password must be changed!"), // 33
              () -> testGetApiAuth(getEmployeePaymentApi, 200,"JohnDoe@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!"), // 34

              // Test persistence
              () -> restartApplication(), // 35
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 36
              // Test business logic
              () -> testPostPaymentResponse(paymentsList, 200, "Payment list must be added"), // 37
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"), // 38
              () -> testPostPaymentResponse(wrongPaymentListSalary, 400, "Wrong salary in payment list"), // 39
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"), // 40
              () -> testPostPaymentResponse(wrongPaymentListData, 400, "Wrong data in payment list"), // 41
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"), // 42
              () -> testPostPaymentResponse(wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"), // 43
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"), // 44
              () -> testPutPaymentResponse(updatePaymentWrongDate, 400,"Wrong date in request body!"), // 45
              () -> testPutPaymentResponse(updatePaymentWrongSalary, 400, "Wrong salary in request body!"), // 46
              () -> testPutPaymentResponse(updatePayment, 200, "Salary must be update!"), // 47
              () -> testGetPaymentResponseParam(jDNewPass, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"), // 48
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse1,
                      "Changes should only apply to one period!"), // 49
              () -> testPutPaymentResponse(updatePayment1, 200, "Salary must be update!"), // 50
              () -> testGetPaymentResponseParam(jDNewPass, 200, updatePayment1, updatePaymentResponse1,
                      "Salary must be update!"), // 51
              () -> testGetPaymentResponseParam(jDNewPass, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"), // 52
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse2,
                      "Changes should only apply to one period!"), // 53
      };
    }
  learner_created: false
- name: src/account/exceptionhandler/InvalidLengthPasswordException.java
  visible: true
  text: |
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
    public class InvalidLengthPasswordException extends RuntimeException{
    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |
    package account.config;

    import account.UserService;
    import account.entites.Role;
    import account.exceptionhandler.RestAuthenticationEntryPoint;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
        @Autowired
        DaoAuthenticationProvider authenticationProvider;
        @Autowired
        private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests()
                    .antMatchers("/api/auth/singup").permitAll()
                    .antMatchers("/api/empl/payment").hasAuthority(Role.ROLE_USER.toString())
                    .antMatchers("/api/auth/changepass").hasAuthority(Role.ROLE_USER.toString())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Override
        public void configure(AuthenticationManagerBuilder auth) {
            auth.authenticationProvider(authenticationProvider);
        }
    }
  learner_created: true
- name: src/account/exceptionhandler/RepetitivePasswordException.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class RepetitivePasswordException extends RuntimeException {}
  learner_created: true
- name: src/account/exceptionhandler/BreachedPasswordException.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPasswordException extends RuntimeException {}
  learner_created: true
- name: src/account/exceptionhandler/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account.exceptionhandler;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/controller/ServiceFuncController.java
  visible: true
  text: |
    package account.controller;

    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class ServiceFuncController {
        @PutMapping("/api/admin/user/role")
        public void changeUserRole(){

        }
        @DeleteMapping("/api/admin/user")
        public void deleteUser(){

        }
        @GetMapping("/api/admin/user")
        public void getUserInfo(){

        }
    }
  learner_created: true
- name: src/account/controller/AuthController.java
  visible: true
  text: |
    package account.controller;

    import account.entites.User;
    import account.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.Map;

    @RestController
    public class AuthController {
        @Autowired
        private UserService userService;

        @PostMapping("/api/auth/signup")
        public ResponseEntity<User> registerUser(@Valid @RequestBody User user) {
            return ResponseEntity.ok().body(userService.registerNewUser(user));
        }

        @PostMapping("/api/auth/changepass")
        public ResponseEntity changeUserPass(@RequestBody Map<String,String> newPassword, @AuthenticationPrincipal User user) {
            return userService.changePassword(newPassword.get("new_password"),user);
        }
    }
  learner_created: true
- name: src/account/controller/BusinessFuncController.java
  visible: true
  text: |
    package account.controller;

    import account.UserService;
    import account.entites.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.web.bind.annotation.*;

    @RestController
    class BusinessFuncController {

        @Autowired
        private UserService userService;


        @GetMapping("/api/empl/payment")
        public ResponseEntity<User> getPayment(@AuthenticationPrincipal User user) {
            User tmpUser = userService.findByEmail(user.getEmail());
            return new ResponseEntity<>(tmpUser, HttpStatus.OK);
        }

        @PostMapping("/api/acct/payments")
        public void uploadsPayrolls() {

        }

        @PutMapping("/api/acct/payments")
        public void updatePaymentinfo() {

        }
    }
  learner_created: true
- name: src/account/entites/User.java
  visible: true
  text: |
    package account.entites;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.hibernate.validator.constraints.Length;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.ArrayList;
    import java.util.List;

    @Entity
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "id", nullable = false)
        private Long id;
        @JsonProperty("name")
        @NotEmpty
        private String username;
        @NotEmpty
        private String lastname;
        // @Pattern(regexp = "^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$")
        @Pattern(regexp = "^([\\w-]+(?:\\.[\\w-]+)*)@(acme.com)$")
        @NotBlank
        @NotNull
        private String email;
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @NotNull
        @NotBlank
        private String password;

        @Enumerated(EnumType.STRING)
        @ElementCollection(fetch = FetchType.EAGER)
        private List<Role> roles;
        @JsonIgnore
        private boolean accountNonExpired;
        @JsonIgnore
        private boolean accountNonLocked;
        @JsonIgnore
        private boolean credentialsNonExpired;
        @JsonIgnore
        private boolean enabled;

        public User() {
            this.accountNonExpired = true;
            this.accountNonLocked = true;
            this.credentialsNonExpired = true;
            this.enabled = true;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return accountNonExpired;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return credentialsNonExpired;
        }

        @Override
        public boolean isEnabled() {
            return enabled;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public void grantAuthority(Role authority) {
            if (roles == null) roles = new ArrayList<>();
            roles.add(authority);
        }
        @JsonIgnore
        @Override
        public List<GrantedAuthority> getAuthorities() {
            List<GrantedAuthority> authorities = new ArrayList<>();
            roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role.toString())));
            return authorities;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

    }
  learner_created: true
- name: src/account/config/BeanConfig.java
  visible: true
  text: |
    package account.config;

    import account.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    import java.util.List;

    @Configuration
    public class BeanConfig {
        @Autowired
        private UserService userService;

        @Bean
        public DaoAuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(getEncoder());
            provider.setUserDetailsService(userService);
            return provider;
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Bean
        public List<String> getBreachedPasswords() {
            return List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
        }
    }
  learner_created: true
- name: src/account/entites/Role.java
  visible: true
  text: |-
    package account.entites;

    public enum Role {
        ROLE_USER,
        ROLE_ADMIN
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account;

    import account.entites.Role;
    import account.entites.User;
    import account.exceptionhandler.BreachedPasswordException;
    import account.exceptionhandler.InvalidLengthPasswordException;
    import account.exceptionhandler.RepetitivePasswordException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;
    import java.util.Map;
    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        @Autowired
        private final UserRepository userRepository;
        @Autowired
        private List<String> breachedPasswords;
        @Autowired
        private PasswordEncoder passwordEncoder;

        public UserService(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        public User findByEmail(String email) {
            return userRepository.findUserByEmailIgnoreCase(email.toLowerCase())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
        }

        public User registerNewUser(User user) {
            user.setEmail(user.getEmail().toLowerCase());
            checkValidPassword(user.getPassword());
            if (userRepository.findUserByEmailIgnoreCase(user.getEmail()).isEmpty()) {
                user.grantAuthority(Role.ROLE_USER);
                user.setPassword(passwordEncoder.encode(user.getPassword()));
                userRepository.save(user);
            } else throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            return user;
        }

        public ResponseEntity changePassword(String newPassword, User authUser) {
            checkValidPassword(newPassword);
            checkDifferencePasswords(newPassword, authUser.getPassword());
            User tmpUser = userRepository.findUserByEmailIgnoreCase(authUser.getEmail()).get();
            tmpUser.setPassword(passwordEncoder.encode(newPassword));
            userRepository.save(tmpUser);
            return ResponseEntity.ok().body(Map.of("email",authUser.getEmail(),"status","The password has been updated successfully"));
        }

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findUserByEmailIgnoreCase(email);

            if (user.isPresent()) {
                return user.get();
            } else {
                throw new UsernameNotFoundException(String.format("Username[%s] not found", email));
            }
        }

        private void checkValidPassword(String password) {
            if (password == null || password.length() < 12) {
                throw new InvalidLengthPasswordException();
            }
            if (breachedPasswords.contains(password)) {
                throw new BreachedPasswordException();
            }
        }

        private void checkDifferencePasswords(String newPassword, String oldPassword) {
            if (passwordEncoder.matches(newPassword, oldPassword)) {
                throw new RepetitivePasswordException();
            }
        }
    }
  learner_created: true
- name: src/account/repository/UserRepository.java
  visible: true
  text: |-
    package account;

    import account.entites.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findUserByEmailIgnoreCase(String email);
    }
  learner_created: true
- name: src/account/entites/Payment.java
  visible: true
  learner_created: true
- name: src/account/service/PaymentService.java
  visible: true
  learner_created: true
- name: src/account/repository/PaymentRepository.java
  visible: true
  learner_created: true
- name: src/account/exceptionhandler/DuplicatePaymentException.java
  visible: true
  learner_created: true
- name: src/account/exceptionhandler/EmoloyeeNotFoundException.java
  visible: true
  learner_created: true
- name: src/account/exceptionhandler/SalaryException.java
  visible: true
  learner_created: true
- name: src/account/config/YearMonthDateAttributeConverter.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16604#comment
status: Failed
feedback:
  message: "Wrong answer in test #38\n\nWrong object in response, expected array of\
    \ JSON but was \nclass java.lang.String\n\nPlease find below the output of your\
    \ program during this failed test.\n\n---\n\n.   ____          _            __\
    \ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_\
    \ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |\
    \  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\
    \ :: Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-05-26 13:53:26.737  INFO 3264\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on Fractal with PID 3264 (started by Fractal in D:\\RepositoryRoadToProfession\\\
    Account Service\\Account Service\\task)\n2022-05-26 13:53:26.742  INFO 3264 ---\
    \ [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-05-26 13:53:27.818  INFO\
    \ 3264 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-05-26 13:53:27.888  INFO\
    \ 3264 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 61ms. Found 2 JPA repository interfaces.\n\
    2022-05-26 13:53:28.623  INFO 3264 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-05-26 13:53:28.634  INFO\
    \ 3264 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-05-26 13:53:28.634  INFO 3264 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.36]\n2022-05-26 13:53:28.776\
    \  INFO 3264 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2022-05-26 13:53:28.776\
    \  INFO 3264 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 1964 ms\n2022-05-26\
    \ 13:53:28.916  INFO 3264 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2022-05-26 13:53:29.150  INFO 3264 --- [\
    \    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start\
    \ completed.\n2022-05-26 13:53:29.165  INFO 3264 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;\n\
    2022-05-26 13:53:29.311  INFO 3264 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-05-26\
    \ 13:53:29.379  INFO 3264 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-05-26 13:53:29.430\
    \  WARN 3264 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-05-26 13:53:29.467  INFO 3264 --- [         task-1]\
    \ org.hibernate.Version                    : HHH000412: Hibernate ORM core version\
    \ 5.4.17.Final\n2022-05-26 13:53:29.696  INFO 3264 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@29f3185c,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@6c421123,\
    \ org.springframework.security.web.header.HeaderWriterFilter@2a667f44, org.springframework.security.web.authentication.logout.LogoutFilter@222d9d4f,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@38ef1a0a,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a631049,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@59a94d0f,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@74bbc273,\
    \ org.springframework.security.web.session.SessionManagementFilter@5db9f51f, org.springframework.security.web.access.ExceptionTranslationFilter@34cb0e49,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d537616]\n\
    2022-05-26 13:53:29.704  INFO 3264 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-05-26 13:53:29.891\
    \  INFO 3264 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-05-26 13:53:30.851\
    \  INFO 3264 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       :\
    \ HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-05-26 13:53:30.861  INFO 3264 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-05-26 13:53:30.938  INFO 3264 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2022-05-26\
    \ 13:53:30.997  INFO 3264 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-05-26\
    \ 13:53:30.998  INFO 3264 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-05-26\
    \ 13:53:31.289  INFO 3264 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-05-26 13:53:31.301  INFO 3264\
    \ --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 4.917 seconds (JVM running for 5.918)\n2022-05-26 13:53:31.614  INFO 3264\
    \ --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-05-26 13:53:31.614\
    \  INFO 3264 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2022-05-26 13:53:31.623  INFO\
    \ 3264 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 9 ms\n2022-05-26 13:53:31.778  WARN 3264 --- [io-28852-exec-1]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;username&#39;: rejected value [];\
    \ codes [NotEmpty.user.username,NotEmpty.username,NotEmpty.java.lang.String,NotEmpty];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.username,username]; arguments []; default message [username]]; default\
    \ message [must not be empty]] ]\n2022-05-26 13:53:31.819  WARN 3264 --- [io-28852-exec-3]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;username&#39;: rejected value [null];\
    \ codes [NotEmpty.user.username,NotEmpty.username,NotEmpty.java.lang.String,NotEmpty];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.username,username]; arguments []; default message [username]]; default\
    \ message [must not be empty]] ]\n2022-05-26 13:53:31.829  WARN 3264 --- [io-28852-exec-2]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;lastname&#39;: rejected value [];\
    \ codes [NotEmpty.user.lastname,NotEmpty.lastname,NotEmpty.java.lang.String,NotEmpty];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.lastname,lastname]; arguments []; default message [lastname]]; default\
    \ message [must not be empty]] ]\n2022-05-26 13:53:31.840  WARN 3264 --- [io-28852-exec-4]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;lastname&#39;: rejected value [null];\
    \ codes [NotEmpty.user.lastname,NotEmpty.lastname,NotEmpty.java.lang.String,NotEmpty];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.lastname,lastname]; arguments []; default message [lastname]]; default\
    \ message [must not be empty]] ]\n2022-05-26 13:53:31.853  WARN 3264 --- [io-28852-exec-5]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User) with 2\
    \ errors: [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected\
    \ value []; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email]]; default message\
    \ [must not be blank]] [Field error in object &#39;user&#39; on field &#39;email&#39;:\
    \ rejected value []; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@6a03a737,^([\\\
    w-]+(?:\\.[\\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\\w-]+(?:\\\
    .[\\w-]+)*)@(acme.com)$&quot;]] ]\n2022-05-26 13:53:31.863  WARN 3264 --- [io-28852-exec-6]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User) with 2\
    \ errors: [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected\
    \ value [null]; codes [NotBlank.user.email,NotBlank.email,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email]]; default message\
    \ [must not be blank]] [Field error in object &#39;user&#39; on field &#39;email&#39;:\
    \ rejected value [null]; codes [NotNull.user.email,NotNull.email,NotNull.java.lang.String,NotNull];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email]]; default message\
    \ [must not be null]] ]\n2022-05-26 13:53:31.874  WARN 3264 --- [io-28852-exec-7]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;password&#39;: rejected value [];\
    \ codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [must not be blank]] ]\n2022-05-26 13:53:31.882  WARN 3264 --- [io-28852-exec-8]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User) with 2\
    \ errors: [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value [null]; codes [NotNull.user.password,NotNull.password,NotNull.java.lang.String,NotNull];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [must not be null]] [Field error in object &#39;user&#39; on field &#39;password&#39;:\
    \ rejected value [null]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [must not be blank]] ]\n2022-05-26 13:53:31.893  WARN 3264 --- [io-28852-exec-9]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;email&#39;: rejected value [johndoeacme.com];\
    \ codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments\
    \ [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email];\
    \ arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@6a03a737,^([\\\
    w-]+(?:\\.[\\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\\w-]+(?:\\\
    .[\\w-]+)*)@(acme.com)$&quot;]] ]\n2022-05-26 13:53:31.902  WARN 3264 --- [o-28852-exec-10]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;account.entites.User&gt;\
    \ account.controller.AuthController.registerUser(account.entites.User): [Field\
    \ error in object &#39;user&#39; on field &#39;email&#39;: rejected value [johndoe@google.com];\
    \ codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments\
    \ [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email];\
    \ arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@6a03a737,^([\\\
    w-]+(?:\\.[\\w-]+)*)@(acme.com)$]; default message [must match &quot;^([\\w-]+(?:\\\
    .[\\w-]+)*)@(acme.com)$&quot;]] ]\n2022-05-26 13:53:35.170  INFO 3264 --- [  \
    \   Thread-336] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory\
    \ for persistence unit &#39;default&#39;\n2022-05-26 13:53:35.172  INFO 3264 ---\
    \ [     Thread-336] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService\
    \ &#39;applicationTaskExecutor&#39;\n2022-05-26 13:53:35.176  INFO 3264 --- [\
    \     Thread-336] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown\
    \ initiated...\n2022-05-26 13:53:35.208  INFO 3264 --- [     Thread-336] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Shutdown completed.\n\n  .   ____          _        \
    \    __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ |\
    \ &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | ||\
    \ (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\
    \ :: Spring Boot ::        (v2.3.1.RELEASE)\n\n2022-05-26 13:53:35.303  INFO 3264\
    \ --- [    Test worker] account.AccountServiceApplication        : Starting AccountServiceApplication\
    \ on Fractal with PID 3264 (started by Fractal in D:\\RepositoryRoadToProfession\\\
    Account Service\\Account Service\\task)\n2022-05-26 13:53:35.304  INFO 3264 ---\
    \ [    Test worker] account.AccountServiceApplication        : No active profile\
    \ set, falling back to default profiles: default\n2022-05-26 13:53:35.689  INFO\
    \ 3264 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-05-26 13:53:35.700  INFO\
    \ 3264 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 9ms. Found 2 JPA repository interfaces.\n\
    2022-05-26 13:53:35.795  INFO 3264 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-05-26 13:53:35.796  INFO\
    \ 3264 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-05-26 13:53:35.797  INFO 3264 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.36]\n2022-05-26 13:53:35.836\
    \  INFO 3264 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2022-05-26 13:53:35.836\
    \  INFO 3264 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 530 ms\n2022-05-26 13:53:35.880\
    \  INFO 3264 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       :\
    \ HikariPool-2 - Starting...\n2022-05-26 13:53:35.893  INFO 3264 --- [    Test\
    \ worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.\n\
    2022-05-26 13:53:35.893  INFO 3264 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;\n\
    2022-05-26 13:53:35.940  INFO 3264 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-05-26\
    \ 13:53:35.944  INFO 3264 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-05-26 13:53:35.951\
    \  INFO 3264 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-05-26 13:53:35.986\
    \  WARN 3264 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-05-26 13:53:36.080  INFO 3264 --- [    Test worker]\
    \ o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request,\
    \ [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4d1b4fa1,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@21b2579d,\
    \ org.springframework.security.web.header.HeaderWriterFilter@22ea6051, org.springframework.security.web.authentication.logout.LogoutFilter@44df834c,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@34c07ecc,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@87f1201,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@796613b7,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@27b7e663,\
    \ org.springframework.security.web.session.SessionManagementFilter@539bb233, org.springframework.security.web.access.ExceptionTranslationFilter@4f0cdd0f,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@29b0c169]\n\
    2022-05-26 13:53:36.083  INFO 3264 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator\
    \       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-05-26 13:53:36.084  INFO 3264 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-05-26 13:53:36.268  INFO 3264 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2022-05-26\
    \ 13:53:36.288  INFO 3264 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-05-26\
    \ 13:53:36.288  INFO 3264 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-05-26\
    \ 13:53:36.334  INFO 3264 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-05-26 13:53:36.339  INFO 3264\
    \ --- [    Test worker] account.AccountServiceApplication        : Started AccountServiceApplication\
    \ in 1.078 seconds (JVM running for 10.956)\n2022-05-26 13:53:36.347  INFO 3264\
    \ --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-05-26 13:53:36.347\
    \  INFO 3264 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2022-05-26 13:53:36.349  INFO\
    \ 3264 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 2 ms"
  time: Thu, 26 May 2022 10:53:36 UTC
record: -1
