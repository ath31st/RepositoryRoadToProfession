type: edu
custom_name: Wanted!
files:
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |
    public class Clue {
        public String output;
        public int threadsStarted;
        public String feedback;

        public Clue(String output, int threadsStarted, String feedback) {
            this.output = output;
            this.threadsStarted = threadsStarted;
            this.feedback = feedback;
        }

    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Function;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;
        private static int startedThreadCount = 0;

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    //Testing basic cases
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%PDF-", "PDF document"})
                            .addFile("test_files" + File.separator + "doc.pdf", "PFDF%PDF-PDF")
                            .addFile("test_files" + File.separator + "text.txt", "PF%PDF-PDFABC")
                            .setAttach(new Clue("doc.pdf: PDF document\n" +
                                    "text.txt: PDF document", 2, "The files had following content: " + "\n" +
                                    "\"PFDF%PDF-PDF\", \"PF%PDF-PDFABC\" and were analyzed for pattern \"%PDF-\"")),

                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .addFile("test_files" + File.separator + "file.pdf", "PF%P-----BEGIN\\CERTIFICATE-----DF-PDF")
                            .setAttach(new Clue("file.pdf: PEM certificate\n" +
                                    "file.pem: PEM certificate", 2, "")),

                    //Testing with only one file in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "the_only_file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .setAttach(new Clue("the_only_file.pem: PEM certificate", 1, "")),

                    //Testing with 10 files in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%txt-", "TXT document"})
                            .addFile("test_files" + File.separator + "doc0.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc1.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc2.pdf", "PFDF%PDF%txt-PF")
                            .addFile("test_files" + File.separator + "doc3.pdf", "PF%PF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc4.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc5.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc6.pdf", "PFF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc7.pdf", "PF%DF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc8.pdf", "PFDF%PDFPDF")
                            .addFile("test_files" + File.separator + "doc9.txt", "PF%PDF%PDF")
                            .setAttach(new Clue("doc0.pdf: TXT document\n" +
                                    "doc1.pdf: TXT document\n" +
                                    "doc2.pdf: TXT document\n" +
                                    "doc3.pdf: TXT document\n" +
                                    "doc4.pdf: TXT document\n" +
                                    "doc5.pdf: TXT document\n" +
                                    "doc6.pdf: TXT document\n" +
                                    "doc7.pdf: TXT document\n" +
                                    "doc8.pdf: Unknown file type\n" +
                                    "doc9.txt: Unknown file type", 10, ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
            long startedThisTestThread = currentThreads - startedThreadCount;

            long neededThreads = startedThreadCount + clue.threadsStarted;
            long startedThisTestNeededThreads = neededThreads - startedThreadCount;

            Function<Long, String> threadName = count ->
                    count + " thread" + (count == 1 ? "" : "s");

            if (startedThisTestThread < startedThisTestNeededThreads) {
                return CheckResult.wrong(
                        "There were not enough Threads started, " +
                                "you should process each file in a different Thread. " +
                                "\nYou started " + threadName.apply(startedThisTestThread) + ", " +
                                "but you need to start " + threadName.apply(startedThisTestNeededThreads) + ". " +
                                "\nThe executor.invokeAll() method might help. Also, don't forget to call .shutdown()."
                );
            }

            startedThreadCount = (int) currentThreads;

            String[] expectedLines = clue.output.split("\n");
            String actual = reply.strip();

            if (actual.isEmpty()) {
                return CheckResult.wrong("No output (check if you exited " +
                        "from main too early, you should wait until all threads are finishes)");
            }

            int expectedLinesLength = expectedLines.length;

            if (actual.trim().split("\n").length != expectedLines.length) {
                return CheckResult.wrong(String.format("There is should be %d lines in the output when you check %d files!\nMake sure you don't print empty lines.", expectedLinesLength, expectedLinesLength));
            }

            for (String expectedLine : expectedLines) {
                if (!actual.toLowerCase().contains(expectedLine.toLowerCase())) {
                    return new CheckResult(false, "Can't find the line '"
                            + expectedLine + "' in the output!");
                }
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        @BeforeClass
        public static void countThreadsBefore() {
            startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
  learner_created: false
- name: src/analyzer/Application.java
  visible: true
  text: |
    package analyzer;

    import java.io.*;
    import java.util.Scanner;

    public class Application {

        public static void run(String[] args) {
            ArgumentsParser.parsing(args);
            File file = new File(ArgumentsParser.getNameFile());
            if (ArgumentsParser.getSearchingSignature().length() > 0) {
                try (Scanner scanner = new Scanner(file)) {
                    String text;
                    while (scanner.hasNextLine()) {
                        text = scanner.nextLine();
                        if (ArgumentsParser.getPatternString().contains("naive")) {
                            if (NaiveMethod.naiveSearch(ArgumentsParser.getSearchingSignature(), text)) {
                                System.out.println(ArgumentsParser.getDocumentType());
                                System.out.println("It took 0 seconds");
                            } else {
                                System.out.println("Unknown file type");
                                System.out.println("It took 0 seconds");
                            }
                        }
                        if (ArgumentsParser.getPatternString().contains("KMP")) {
                            if (AlgorithmKMP.KMPSearch(ArgumentsParser.getSearchingSignature(), text)) {
                                System.out.println(ArgumentsParser.getDocumentType());
                                System.out.println("It took 0 seconds");
                            } else {
                                System.out.println("Unknown file type");
                                System.out.println("It took 0 seconds");
                            }
                        }
                    }
                } catch (IOException e) {
                    System.out.println("File not found!");
                }
            } else {
                System.out.println("Unknown file type");
                System.out.println("It took 0 seconds");
            }


    //        System.out.println(ArgumentsParser.getSearchingSignature());
    //        System.out.println(ArgumentsParser.getNameFile());
    //        System.out.println(ArgumentsParser.getPatternString());
    //        System.out.println(ArgumentsParser.getDocumentType());
        }
    }
  learner_created: true
- name: src/analyzer/AlgorithmKMP.java
  visible: true
  text: |
    package analyzer;

    public class AlgorithmKMP {
        public static boolean KMPSearch(String pat, String txt)
        {
            int M = pat.length();
            int N = txt.length();

            int arr[] = new int[M];
            int j = 0; // for traversing through pattern

            computearrArray(pat, M, arr);

            int i = 0; // for traversing through text
            while (i < N) {
                if (pat.charAt(j) == txt.charAt(i)) {
                    j++;
                    i++;
                }
                if (j == M) {
                    //System.out.println("Found pattern "+ "at index " + (i - j));
                    j = arr[j - 1];
                    return true;
                }

                // mismatch occurs
                else if (i < N && pat.charAt(j) != txt.charAt(i)) {
                    if (j != 0)
                        j = arr[j - 1];
                    else
                        i = i + 1;
                }
            }
            return false;
        }

        static void computearrArray(String pat, int M, int arr[])
        {
            int len = 0;
            int i = 1;
            arr[0] = 0; // arr[0] is always 0

            while (i < M) {
                if (pat.charAt(i) == pat.charAt(len)) {
                    len++;
                    arr[i] = len;
                    i++;
                }
                else // (pat[i] != pat[len])
                {
                    if (len != 0) {
                        len = arr[len - 1];
                    }
                    else // if (len == 0)
                    {
                        arr[i] = len;
                        i++;
                    }
                }
            }
        }

    //    public static void main(String args[])
    //    {
    //        String txt = "ABCXABCDABXABCDABCDABCY";
    //        String pat = "ABCDABCY";
    //        new AlgorithmKMP().KMPSearch(pat, txt);
    //    }
    }
  learner_created: true
- name: src/analyzer/ArgumentsParser.java
  visible: true
  text: |
    package analyzer;

    import java.util.regex.Pattern;

    public class ArgumentsParser {
        private static String nameFile = "";
        private static String documentType = "";
        private static String patternString = "";
        private static String searchingSignature = "";

        public static String getNameFile() {
            return nameFile;
        }

        public static String getDocumentType() {
            return documentType;
        }

        public static String getPatternString() {
            return patternString;
        }

        public static String getSearchingSignature() {
            return searchingSignature;
        }

        Pattern pattern = Pattern.compile("^.*\\.(jpg|JPG|gif|GIF|doc|DOC|pdf|PDF)$");

        public static void parsing(String[] args) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].startsWith("-")) {
                    patternString = args[i];
                }
                if (args[i].startsWith("%") & args[i].endsWith("-")) {
                    searchingSignature = args[i];
                }
                if (args[i].matches("^.*\\.(jpg|JPG|gif|GIF|doc|DOC|pdf|PDF)$")) {
                    nameFile = args[i];
                }
                if (args[i].contains(" document") | args[i].contains("Unknown")) {
                    documentType = args[i];
                }
            }
        }

    //    public static void main(String args[]) {
    //        parsing(args);
    //        System.out.println(nameFile);
    //        System.out.println(patternString);
    //        System.out.println(searchingSignature);
    //    }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5487#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 06 Mar 2022 17:46:50 UTC
record: -1
