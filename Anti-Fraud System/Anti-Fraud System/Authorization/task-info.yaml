type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");

            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String api, String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String api, String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method,
                                            int status, String amount, String answer, TestHint hint) {

            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            if (isNumeric(amount)) {
                jsonBody.addProperty("amount", Long.parseLong(amount));
            } else if (amount == null) {
                jsonBody.addProperty("amount", (Boolean) null);
            } else if (!amount.equals("empty")) {
                jsonBody.addProperty("amount", amount);
            }

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer));
            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"199", "ALLOWED",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"200", "ALLOWED",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"201", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1499", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1500", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1501", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"2000", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"-1", "Wrong request!",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"0", "Wrong request!",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,null, "Wrong request!",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"", "Wrong request!",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400," ", "Wrong request!",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"empty", "Wrong request!",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(roleApi, administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(roleApi, administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(roleApi, administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(roleApi, administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(roleApi, administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(lockApi, administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(administrator, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi + "/", "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi + "/")), // 50

                () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 51

                () -> testTransaction(johndoe2, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi + "/")), // 52

                () -> testTransaction(null, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 53

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 55

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 56

                () -> testDeleteUser(johndoe3,403,"",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 57

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 58

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 59

                () -> testLock(lockApi, johndoe3, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role MERCHANT" +
                                " must not have access to "  + lockApi)), // 60

                () -> testLock(lockApi, johndoe2, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role SUPPORT" +
                                " must not have access to "  + lockApi)), // 61

                () -> testLock(lockApi + "/", johndoe3, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi + "/", "", "A user with role MERCHANT" +
                                " must not have access to " + lockApi + "/")), // 62

                () -> testLock(lockApi + "/", johndoe2, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + lockApi + "/")), // 63

                () -> testLock(lockApi, null, 401, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + lockApi)), // 64

                () -> testRole(roleApi, johndoe2,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role SUPPORT" +
                                " must not have access to " + roleApi)), // 65

                () -> testRole(roleApi, johndoe3,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role MERCHANT" +
                                " must not have access to " + roleApi)), // 66

                () -> testRole(roleApi, null,401,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + roleApi)), // 67

                () -> testRole(roleApi + "/", johndoe2,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + roleApi + "/")), // 68

                () -> testRole(roleApi + "/", johndoe3,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi + "/", "", "A user with role MERCHANT" +
                                " must not have access to " + roleApi + "/")), // 69

        };
    }
  learner_created: false
- name: src/antifraud/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.service.TransactionService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;

    @RestController
    @Validated
    public class TransactionController {
        @Autowired
        private TransactionService transactionService;

        @PostMapping("/api/antifraud/transaction")
        public ResponseEntity transactionReq(@RequestBody Map<String, Long> transaction) {
            return transactionService.checkValidTransaction(transaction);
        }
    }
  learner_created: true
- name: src/antifraud/repository/UserRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.entity.User;
    import org.springframework.data.repository.CrudRepository;

    import java.util.Optional;

    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findUserByUsernameIgnoreCase(String username);
    }
  learner_created: true
- name: src/antifraud/entity/User.java
  visible: true
  text: |
    package antifraud.entity;

    import antifraud.util.Role;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.LinkedList;
    import java.util.List;

    @Entity
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        @Column(name = "id", nullable = false)
        private Long id;
        @Column
        @NotBlank
        private String name;
        @Column
        @NotBlank
        private String username;
        @Column
        @NotBlank
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        private String password;

        @Enumerated(EnumType.STRING)
        @ElementCollection(fetch = FetchType.EAGER)
        private List<Role> roles;
        @JsonIgnore
        private boolean accountNonExpired;
        @JsonIgnore
        private boolean accountNonLocked;
        @JsonIgnore
        private boolean credentialsNonExpired;
        @JsonIgnore
        private boolean enabled;

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public User() {
            this.accountNonExpired = true;
            this.accountNonLocked = true;
            this.credentialsNonExpired = true;
            this.enabled = true;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void grantAuthority(Role authority) {
            if (roles == null) roles = new LinkedList<>();
            roles.add(authority);
        }

        @JsonIgnore
        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            List<GrantedAuthority> authorities = new ArrayList<>();
            roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role.getName())));
            return authorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return accountNonExpired;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return credentialsNonExpired;
        }

        @Override
        public boolean isEnabled() {
            return enabled;
        }
    }
  learner_created: true
- name: src/antifraud/controller/AuthController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.dto.DeleteUserResponse;
    import antifraud.entity.User;
    import antifraud.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    public class AuthController {
        @Autowired
        private UserService userService;

        @PostMapping("/api/auth/user")
        public ResponseEntity<User> registerNewUser(@RequestBody @Valid User user) {
            return new ResponseEntity<>(userService.registerNewUser(user), HttpStatus.CREATED);
        }

        @GetMapping("/api/auth/list")
        public ResponseEntity<List<User>> getUsersInfo() {
            return new ResponseEntity<>(userService.getUsersInfo(), HttpStatus.OK);
        }

        @DeleteMapping("/api/auth/user/{username}")
        public ResponseEntity<DeleteUserResponse> deleteUser(@PathVariable(value = "username") String username) {
            return new ResponseEntity<>(userService.deleteUser(username), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/antifraud/dto/DeleteUserResponse.java
  visible: true
  text: |
    package antifraud.dto;

    public class DeleteUserResponse {
        private String username;
        private String status;

        public DeleteUserResponse() {
        }

        public DeleteUserResponse(String username, String status) {
            this.username = username;
            this.status = status;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
  learner_created: true
- name: src/antifraud/util/Role.java
  visible: true
  text: |
    package antifraud.util;

    public enum Role {
        ADMIN("ROLE_ADMINISTRATOR"),
        USER("ROLE_USER");

        private String name;

        Role(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }
  learner_created: true
- name: src/antifraud/config/SecurityConfig.java
  visible: true
  text: |
    package antifraud.config;

    import antifraud.exceptionhandler.RestAuthenticationEntryPoint;
    import antifraud.util.Role;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {
        @Autowired
        private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers("/actuator/shutdown").permitAll() // needs to run test
                    .antMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                    .antMatchers(HttpMethod.DELETE, "/api/auth/user").hasAuthority(Role.USER.getName())
                    .antMatchers(HttpMethod.GET, "/api/auth/list").hasAuthority(Role.USER.getName())
                    .antMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasAuthority(Role.USER.getName())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/antifraud/service/TransactionService.java
  visible: true
  text: |
    package antifraud.service;

    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.util.Map;

    @Service
    public class TransactionService {
        public ResponseEntity<Map<String, String>> checkValidTransaction(Map<String, Long> transaction) {
            if (transaction.get("amount") == null || transaction.get("amount") <= 0) {
                return ResponseEntity.badRequest().build();
            } else if (transaction.get("amount") <= 200) {
                return ResponseEntity.ok().body(Map.of("result", "ALLOWED"));
            } else if (transaction.get("amount") <= 1500) {
                return ResponseEntity.ok().body(Map.of("result", "MANUAL_PROCESSING"));
            } else {
                return ResponseEntity.ok().body(Map.of("result", "PROHIBITED"));
            }
        }
    }
  learner_created: true
- name: src/antifraud/service/UserService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.dto.DeleteUserResponse;
    import antifraud.entity.User;
    import antifraud.repository.UserRepository;
    import antifraud.util.Role;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        @Autowired
        private UserRepository userRepository;
        @Autowired
        private PasswordEncoder passwordEncoder;

        public User registerNewUser(User user) {
            if (userRepository.findUserByUsernameIgnoreCase(user.getUsername()).isPresent())
                throw new ResponseStatusException(HttpStatus.CONFLICT, "User exist!");
    //        user.setUsername(user.getUsername().toLowerCase());
            user.grantAuthority(Role.USER);
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            userRepository.save(user);
            return user;
        }

        public List<User> getUsersInfo() {
            List<User> users = new ArrayList<>();
            userRepository.findAll().iterator().forEachRemaining(users::add);
            return users;
        }

        public DeleteUserResponse deleteUser(String username) {
            User user = userRepository.findUserByUsernameIgnoreCase(username)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!"));
            userRepository.delete(user);
            return new DeleteUserResponse(user.getUsername(), "Deleted successfully!");
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findUserByUsernameIgnoreCase(username);

            if (user.isPresent()) {
                return user.get();
            } else {
                throw new UsernameNotFoundException(String.format("Username[%s] not found", username));
            }
        }
    }
  learner_created: true
- name: src/antifraud/exceptionhandler/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package antifraud.exceptionhandler;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/antifraud/dto/LockUnlockReq.java
  visible: true
  learner_created: true
- name: src/antifraud/util/Operation.java
  visible: true
  learner_created: true
- name: src/antifraud/dto/LockUnlockResp.java
  visible: true
  learner_created: true
- name: src/antifraud/dto/UserRoleReq.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/232/stages/1163/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #50

    POST /api/antifraud/transaction/ should respond with status code 403, responded: 200
    Response body:
    {
      &quot;result&quot; : &quot;ALLOWED&quot;
    }

    Please find below the output of your program during this failed test.

    ---

    [last 250 lines of output are shown, 75 skipped]
    }&#39;
    Expectations: &#39;If user successfully added, endpoint must respond with HTTP CREATED status (201) &#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;A user with incorrect credentials is not allowed&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;A user with incorrect credentials is not allowed&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;Merchant after registration must be LOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/access&#39;
    Expectations: &#39;A user johndoe1 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;A user johndoe1 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 1&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;ALLOWED&#39;&#39;
    -----
    2022-06-06 18:59:31.881  INFO 16408 --- [     Thread-336] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-06-06 18:59:31.883  INFO 16408 --- [     Thread-336] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#39;applicationTaskExecutor&#39;
    2022-06-06 18:59:31.884  INFO 16408 --- [     Thread-336] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2022-06-06 18:59:31.903  INFO 16408 --- [     Thread-336] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2022-06-06 18:59:31.998  INFO 16408 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication on Fractal with PID 16408 (started by Fractal in D:\RepositoryRoadToProfession\Anti-Fraud System\Anti-Fraud System\task)
    2022-06-06 18:59:31.998  INFO 16408 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to default profiles: default
    2022-06-06 18:59:32.375  INFO 16408 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
    2022-06-06 18:59:32.383  INFO 16408 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 7ms. Found 1 JPA repository interfaces.
    2022-06-06 18:59:32.488  INFO 16408 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
    2022-06-06 18:59:32.489  INFO 16408 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-06-06 18:59:32.489  INFO 16408 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2022-06-06 18:59:32.523  INFO 16408 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-06-06 18:59:32.523  INFO 16408 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 523 ms
    2022-06-06 18:59:32.566  INFO 16408 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2022-06-06 18:59:32.578  INFO 16408 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2022-06-06 18:59:32.578  INFO 16408 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../service_db&#39;
    2022-06-06 18:59:32.627  INFO 16408 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2022-06-06 18:59:32.632  INFO 16408 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-06-06 18:59:32.637  INFO 16408 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-06-06 18:59:32.663  WARN 16408 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-06-06 18:59:32.694  INFO 16408 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-06-06 18:59:32.695  INFO 16408 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-06-06 18:59:32.704  INFO 16408 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@14fe085b, org.springframework.security.web.context.SecurityContextPersistenceFilter@7535307c, org.springframework.security.web.header.HeaderWriterFilter@147097ad, org.springframework.security.web.authentication.logout.LogoutFilter@62e586a6, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@64908ab9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@556a6320, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@45375bdf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1ea19c97, org.springframework.security.web.session.SessionManagementFilter@3539cf45, org.springframework.security.web.access.ExceptionTranslationFilter@6f69e2d8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@510a2c7]
    2022-06-06 18:59:32.897  INFO 16408 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-06-06 18:59:32.920  INFO 16408 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;
    2022-06-06 18:59:32.921  INFO 16408 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositories…
    2022-06-06 18:59:32.961  INFO 16408 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
    2022-06-06 18:59:32.967  INFO 16408 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.003 seconds (JVM running for 9.038)
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;After restart user must exist&#39;
    -----
    2022-06-06 18:59:32.972  INFO 16408 --- [io-28852-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-06-06 18:59:32.972  INFO 16408 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-06-06 18:59:32.976  INFO 16408 --- [io-28852-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms
    Test case
    Testing api: &#39;/api/auth/user&#39;
    request: &#39;{
       &quot;name&quot;: &quot;John Doe 1&quot;,
       &quot;username&quot;: &quot;johndoe1&quot;,
       &quot;password&quot;: &quot;oMoa3VvqnLxW&quot;
    }&#39;
    Expectations: &#39;In case of an attempt to register an existing user, endpoint must respond with HTTP CONFLICT status (409).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/user&#39;
    request: &#39;{
       &quot;name&quot;: &quot;John Doe 2&quot;,
       &quot;username&quot;: &quot;johndoe2&quot;,
       &quot;password&quot;: &quot;oMoa5VvqnLxW&quot;
    }&#39;
    Expectations: &#39;If user successfully added, endpoint must respond with HTTP CREATED status (201) &#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 199&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;ALLOWED&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 200&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;ALLOWED&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 201&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;MANUAL_PROCESSING&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 1499&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;MANUAL_PROCESSING&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 1500&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;MANUAL_PROCESSING&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 1501&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;PROHIBITED&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 2000&#39;
    Expectations: &#39;Result validating of Transaction must be &#39;PROHIBITED&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = -1&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = 0&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = null&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = &quot;&quot;&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;amount = &quot; &quot;&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    request: &#39;empty body&#39;
    Expectations: &#39;Response status must be &#39;Bad request&#39;&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/user&#39;
    request: &#39;/api/auth/user/somebody&#39;
    Expectations: &#39;If a user is not found, respond with HTTP Not Found status (404).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/user&#39;
    request: &#39;/api/auth/user/johndoe1&#39;
    Expectations: &#39;The endpoint must delete the user and respond with HTTP OK status (200)&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;User &#39;johndoe1&#39; must be delete&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/role&#39;
    Expectations: &#39;If a user is not found, endpoint must respond with the HTTP Not Found status (404).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/role&#39;
    Expectations: &#39;If a role is not found, endpoint must respond with the HTTP Bad Request status (400).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/role&#39;
    Expectations: &#39;If a role is ADMINISTRATOR, endpoint must respond with the HTTP Bad Request status (400).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/role&#39;
    Expectations: &#39;If a role successfully changed, respond with the HTTP OK status (200)&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/role&#39;
    Expectations: &#39;If a role already assigned to a user, endpoint must respond with the HTTP Conflict status (409).&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/access&#39;
    Expectations: &#39;A user johndoe2 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/list&#39;
    Expectations: &#39;Role for user &#39;johndoe2&#39; must be changed to SUPPORT&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;Role MERCHANT must be removed from user johndoe2!&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/user&#39;
    request: &#39;{
       &quot;name&quot;: &quot;John Doe 3&quot;,
       &quot;username&quot;: &quot;johndoe3&quot;,
       &quot;password&quot;: &quot;oMoa6VvqnLxW&quot;
    }&#39;
    Expectations: &#39;If user successfully added, endpoint must respond with HTTP CREATED status (201) &#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;MERCHANT user after registration must be LOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/access&#39;
    Expectations: &#39;A user johndoe3 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;A user johndoe3 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/access&#39;
    Expectations: &#39;A user johndoe3 must be LOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;A user johndoe3 must be LOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/auth/access&#39;
    Expectations: &#39;A user johndoe3 must be UNLOCKED&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction&#39;
    Expectations: &#39;A user with role ADMINISTRATOR must not have access to /api/antifraud/transaction&#39;
    -----
    Test case
    Testing api: &#39;/api/antifraud/transaction/&#39;
    Expectations: &#39;A user with role ADMINISTRATOR must not have access to /api/antifraud/transaction/&#39;
    -----
  time: Mon, 06 Jun 2022 15:59:36 UTC
record: -1
