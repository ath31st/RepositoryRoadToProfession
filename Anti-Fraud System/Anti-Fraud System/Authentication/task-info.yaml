type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        List<Integer> userIdList = new ArrayList<>();

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe1Upper = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"JohnDoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2Upper = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"Johnddoe2\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\"\n" +
                "}, {\n" +
                "  \"id\" : 3,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 3,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\"\n" +
                "} ]";

        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");

            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method,
                                            int status, String amount, String answer, TestHint hint) {

            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            if (isNumeric(amount)) {
                jsonBody.addProperty("amount", Long.parseLong(amount));
            } else if (amount == null) {
                jsonBody.addProperty("amount", (Boolean) null);
            } else if (!amount.equals("empty")) {
                jsonBody.addProperty("amount", amount);
            }

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer));
            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400,
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400,
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(johndoe1, 201,
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(johndoe1, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 5

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 6

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 7

                // Testing persistence
                () -> restartApplication(), // 8

                () -> testListUser(johndoe1, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "After restart user must exist")), // 9

                () -> testAddUser(johndoe1, 409,
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 10

                () -> testAddUser(johndoe2, 201,
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 11

                () -> testListUser(johndoe1, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 12

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"199", "ALLOWED",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 13

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"200", "ALLOWED",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 14

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"201", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 15

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1499", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 16

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1500", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1501", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"2000", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"-1", "Wrong request!",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"0", "Wrong request!",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,null, "Wrong request!",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"", "Wrong request!",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 400," ", "Wrong request!",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"empty", "Wrong request!",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testDeleteUser(johndoe1,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 26

                () -> testTransaction(johndoe1Upper, transactionApi, "POST", 200,"2000", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 2000", "Usernames must be case insensitive.")), // 27

                () -> testDeleteUser(johndoe2,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 28

                () -> testListUser(johndoe2, 200,  listAnswer2, 0,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 29

                () -> testListUser(johndoe2, 200,  listAnswer2, 0,
                        new TestHint(userListApi, "", "Usernames must be case insensitive.")), // 30

        };
    }
  learner_created: false
- name: src/antifraud/service/TransactionService.java
  visible: true
  text: |
    package antifraud.service;

    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.util.Map;

    @Service
    public class TransactionService {
        public ResponseEntity<Map<String, String>> checkValidTransaction(Map<String, Long> transaction) {
            if (transaction.get("amount") == null || transaction.get("amount") <= 0) {
                return ResponseEntity.badRequest().build();
            } else if (transaction.get("amount") <= 200) {
                return ResponseEntity.ok().body(Map.of("result", "ALLOWED"));
            } else if (transaction.get("amount") <= 1500) {
                return ResponseEntity.ok().body(Map.of("result", "MANUAL_PROCESSING"));
            } else {
                return ResponseEntity.ok().body(Map.of("result", "PROHIBITED"));
            }
        }
    }
  learner_created: true
- name: src/antifraud/entity/User.java
  visible: true
  learner_created: true
- name: src/antifraud/config/SecurityConfig.java
  visible: true
  learner_created: true
- name: src/antifraud/exceptionhandler/RestAuthenticationEntryPoint.java
  visible: true
  learner_created: true
- name: src/antifraud/service/UserService.java
  visible: true
  learner_created: true
- name: src/antifraud/repository/UserRepository.java
  visible: true
  learner_created: true
- name: src/antifraud/controller/AuthController.java
  visible: true
  learner_created: true
- name: src/antifraud/dto/DeleteUserResponse.java
  visible: true
  learner_created: true
- name: src/antifraud/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.service.TransactionService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;

    @RestController
    @Validated
    public class Transaction {
        @Autowired
        private TransactionService transactionService;

        @PostMapping("/api/antifraud/transaction")
        public ResponseEntity transactionReq(@RequestBody Map<String, Long> transaction) {
            return transactionService.checkValidTransaction(transaction);
        }
    }
  learner_created: true
- name: src/antifraud/util/Role.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/232/stages/1162/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #4\n\nGET /api/auth/list should respond with status\
    \ code 200, responded: 401\nResponse body:\n{\n  &quot;timestamp&quot; : &quot;2022-06-06T09:38:23.968+00:00&quot;,\n\
    \  &quot;status&quot; : 401,\n  &quot;error&quot; : &quot;Unauthorized&quot;,\n\
    \  &quot;message&quot; : &quot;Bad credentials&quot;,\n  &quot;path&quot; : &quot;/api/auth/list&quot;\n\
    }\n\nPlease find below the output of your program during this failed test.\n\n\
    ---\n\n.   ____          _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __\
    \  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\\
    \ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_|\
    \ |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot\
    \ ::        (v2.3.1.RELEASE)\n\n2022-06-06 12:38:18.411  INFO 10632 --- [    Test\
    \ worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication\
    \ on Fractal with PID 10632 (started by Fractal in D:\\RepositoryRoadToProfession\\\
    Anti-Fraud System\\Anti-Fraud System\\task)\n2022-06-06 12:38:18.415  INFO 10632\
    \ --- [    Test worker] antifraud.AntiFraudApplication           : No active profile\
    \ set, falling back to default profiles: default\n2022-06-06 12:38:19.547  INFO\
    \ 10632 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping\
    \ Spring Data JPA repositories in DEFERRED mode.\n2022-06-06 12:38:19.612  INFO\
    \ 10632 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished\
    \ Spring Data repository scanning in 57ms. Found 1 JPA repository interfaces.\n\
    2022-06-06 12:38:20.318  INFO 10632 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 28852 (http)\n2022-06-06 12:38:20.331  INFO\
    \ 10632 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2022-06-06 12:38:20.331  INFO 10632 --- [    Test worker]\
    \ org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache\
    \ Tomcat/9.0.36]\n2022-06-06 12:38:20.490  INFO 10632 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring embedded WebApplicationContext\n2022-06-06 12:38:20.490\
    \  INFO 10632 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 2008 ms\n2022-06-06\
    \ 12:38:20.652  INFO 10632 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2022-06-06 12:38:20.905  INFO 10632 ---\
    \ [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 -\
    \ Start completed.\n2022-06-06 12:38:20.922  INFO 10632 --- [    Test worker]\
    \ o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;.\
    \ Database available at &#39;jdbc:h2:file:../service_db&#39;\n2022-06-06 12:38:21.074\
    \  INFO 10632 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  :\
    \ Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2022-06-06 12:38:21.158\
    \  INFO 10632 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  :\
    \ HHH000204: Processing PersistenceUnitInfo [name: default]\n2022-06-06 12:38:21.172\
    \  WARN 10632 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2022-06-06 12:38:21.262  INFO 10632 --- [         task-1]\
    \ org.hibernate.Version                    : HHH000412: Hibernate ORM core version\
    \ 5.4.17.Final\n2022-06-06 12:38:21.322  INFO 10632 --- [    Test worker] .s.s.UserDetailsServiceAutoConfiguration\
    \ : \n\nUsing generated security password: ceaf42a4-c81e-4fe0-884f-a8b06dfbfb7a\n\
    \n2022-06-06 12:38:21.451  INFO 10632 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@699e0bf0,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@cec590c,\
    \ org.springframework.security.web.header.HeaderWriterFilter@13fe5bb7, org.springframework.security.web.authentication.logout.LogoutFilter@455f4483,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@752973de,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@21090c88,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f3b13d0,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2499b971,\
    \ org.springframework.security.web.session.SessionManagementFilter@2342f1ff, org.springframework.security.web.access.ExceptionTranslationFilter@2321e482,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@505f45cc]\n\
    2022-06-06 12:38:21.465  INFO 10632 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2022-06-06 12:38:21.691\
    \  INFO 10632 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2022-06-06 12:38:22.504\
    \  INFO 10632 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       :\
    \ HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2022-06-06 12:38:22.512  INFO 10632 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2022-06-06 12:38:22.607  INFO 10632 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2022-06-06\
    \ 12:38:22.672  INFO 10632 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;\n2022-06-06\
    \ 12:38:22.673  INFO 10632 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2022-06-06\
    \ 12:38:22.969  INFO 10632 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2022-06-06 12:38:22.982  INFO 10632\
    \ --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication\
    \ in 4.943 seconds (JVM running for 5.778)\nTest case\nTesting api: &#39;/api/auth/user&#39;\n\
    request: &#39;{\n   &quot;name&quot;: &quot;John Doe 1&quot;,\n   &quot;password&quot;:\
    \ &quot;oa3VvqnLxW&quot;\n}&#39;\nExpectations: &#39;In case of wrong data in\
    \ request, endpoint must respond with BAD REQUEST  status (400).&#39;\n-----\n\
    2022-06-06 12:38:23.300  INFO 10632 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;\n\
    2022-06-06 12:38:23.301  INFO 10632 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet\
    \        : Initializing Servlet &#39;dispatcherServlet&#39;\n2022-06-06 12:38:23.309\
    \  INFO 10632 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Completed initialization in 8 ms\n2022-06-06 12:38:23.471  WARN 10632 --- [io-28852-exec-1]\
    \ .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException:\
    \ Validation failed for argument [0] in public org.springframework.http.ResponseEntity&lt;antifraud.entity.User&gt;\
    \ antifraud.controller.AuthController.registerNewUser(antifraud.entity.User):\
    \ [Field error in object &#39;user&#39; on field &#39;username&#39;: rejected\
    \ value [null]; codes [NotBlank.user.username,NotBlank.username,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.username,username]; arguments []; default message [username]]; default\
    \ message [must not be blank]] ]\nTest case\nTesting api: &#39;/api/auth/user&#39;\n\
    request: &#39;{\n   &quot;name&quot;: &quot;John Doe 2&quot;,\n   &quot;username&quot;:\
    \ &quot;johndoe1&quot;\n}&#39;\nExpectations: &#39;In case of wrong data in request,\
    \ endpoint must respond with BAD REQUEST  status (400).&#39;\n-----\n2022-06-06\
    \ 12:38:23.527  WARN 10632 --- [io-28852-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver\
    \ : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public org.springframework.http.ResponseEntity&lt;antifraud.entity.User&gt;\
    \ antifraud.controller.AuthController.registerNewUser(antifraud.entity.User):\
    \ [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value [null]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [must not be blank]] ]\nTest case\nTesting api: &#39;/api/auth/user&#39;\n\
    request: &#39;{\n   &quot;name&quot;: &quot;John Doe 1&quot;,\n   &quot;username&quot;:\
    \ &quot;johndoe1&quot;,\n   &quot;password&quot;: &quot;oMoa3VvqnLxW&quot;\n}&#39;\n\
    Expectations: &#39;If user successfully added, endpoint must respond with HTTP\
    \ CREATED status (201) &#39;\n-----\nTest case\nTesting api: &#39;/api/auth/list&#39;\n\
    Expectations: &#39;Endpoint must respond with HTTP OK status (200) and body with\
    \ array of objects representing the users sorted by ID in ascending order.&#39;\n\
    -----"
  time: Mon, 06 Jun 2022 09:38:24 UTC
record: -1
