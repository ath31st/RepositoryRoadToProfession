type: edu
custom_name: stage4
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.print("\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u0020\u0020\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u2588\u2588\u0020\u0020\u0020\u0020\u0020\u0020\u2588\u2588\n");
            System.out.print("\u2588\u2588\u0020\u0020\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u0020\u0020\u2588\u2588\u2588\u2588\u2588\u2588\n");
            System.out.print("\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u0020\u2588\u2588\n");
            System.out.print("\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n");
            char[][] maze = new char[10][10];

        }

    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        boolean withPath;
        int count;
        Clue(int s, int c, boolean wp) {
            size = s;
            count = c;
            withPath = wp;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n29\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n35\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n5\n0")
                    .setAttach(new Clue(35, 2, true))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() != clue.count) {
                if (clue.count == 1) {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be only one maze."
                    );
                } else {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be two mazes."
                    );
                }
            }

            Maze fst = mazes.get(0);
            Maze snd = mazes.size() == 2 ? mazes.get(1) : null;

            if (snd != null && !fst.equals(snd)) {
                return CheckResult.wrong(
                    "The two mazes shown should be equal, but they are different."
                );
            }

            if (fst.count(Elem.PATH) != 0) {
                return CheckResult.wrong(
                    "The first maze should not contain '/' characters."
                );
            }

            int entrances = fst.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = fst.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (fst.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + fst.getHeight() + ", but should be " + clue.size);
            }

            if (fst.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + fst.getWidth() + ", but should be " + clue.size);
            }

            if (snd != null && clue.withPath) {
                try {
                    int pathLeft = snd.checkPath();
                    if (pathLeft > 0) {
                        return new CheckResult(false,
                            "There are " + pathLeft + " escape path ('//') " +
                                "cells that are separated from the escape path of the maze " +
                                "(or there is a break somewhere in the escape path)."
                        );
                    }
                } catch (Exception e) {
                    return CheckResult.wrong(
                        e.getMessage()
                    );
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test_maze.txt
  visible: true
  text: |
    <Maze>
      <height>15</height>
      <width>15</width>
      <map>
        <map>6343522376197636095</map>
        <map>6161667514437897719</map>
        <map>-2460616083650739459</map>
        <map>-227283</map>
      </map>
    </Maze>
  learner_created: true
- name: src/maze/Maze.java
  visible: true
  text: |-
    package maze;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.Arrays;
    import java.util.BitSet;
    import java.util.Random;
    import java.util.logging.Logger;
    import java.util.stream.Collectors;

    import static java.util.Comparator.comparing;
    import static java.util.stream.IntStream.range;

    public class Maze {
        private static final Logger LOG = Logger.getLogger(Maze.class.getName());
        private static final String EMPTY_CELL = "  ";
        private static final String FILL_CELL = "\u2588\u2588";
        private static final int MAX_WEIGHT = 10;

        private int height;
        private int width;
        private BitSet maze;

        public Maze() {
        }

        public Maze(int height, int width) {
            this.height = height;
            this.width = width;
            maze = new BitSet(height * width);
            maze.set(0, maze.size());
        }

        public int getHeight() {
            return height;
        }

        public void setHeight(int height) {
            this.height = height;
        }

        public int getWidth() {
            return width;
        }

        public void setWidth(int width) {
            this.width = width;
        }

        public long[] getMap() {
            return maze.toLongArray();
        }

        public void setMap(long[] maze) {
            this.maze = BitSet.valueOf(maze);
        }

        public Maze generate() {
            final var random = new Random();
            final int rows = (height - 1) / 2;
            final int cols = (width - 1) / 2;
            final int step = 2 * cols - 1;
            final var edges = range(0, 2 * cols * rows - rows - cols)
                    .mapToObj(i -> {
                        int row = 1 + i / step * 2 + (i % step < cols - 1 ? 0 : 1);
                        int col = i % step < cols - 1 ? 2 + i % step * 2 : 1 + (i % step - cols + 1) * 2;
                        int edgeIndex = row * width + col;
                        var isHorizontal = i % step < cols - 1;
                        int dx = isHorizontal ? 1 : width;
                        int nodeA = edgeIndex - dx;
                        int nodeB = edgeIndex + dx;
                        int edgeWeight = 1 + random.nextInt(MAX_WEIGHT);
                        return new Edge(edgeWeight, nodeA, nodeB, edgeIndex);
                    }).toArray(Edge[]::new);

            maze.clear(width + 1);
            range(1, rows * cols)
                    .forEach(i -> Arrays.stream(edges)
                            .filter(Edge::isBorder)
                            .min(comparing(Edge::getWeight))
                            .orElseThrow()
                            .clearEdge());
            clearDoors();
            return this;
        }

        @Override
        public String toString() {
            return range(0, height * width)
                    .mapToObj(i -> (i % width == 0 ? "\n" : "") + (maze.get(i) ? FILL_CELL : EMPTY_CELL))
                    .collect(Collectors.joining());
        }

        void clearDoors() {
            maze.clear(width);
            int door = width * (height - (height % 2 == 0 ? 2 : 1)) - 1;
            maze.clear(door);
            if (width % 2 == 0) {
                maze.clear(--door);
            }
        }

        class Edge {
            final int edgeIndex;
            final int weight;
            final int nodeA;
            final int nodeB;

            Edge(int weight, int nodeA, int nodeB, int edgeIndex) {
                this.weight = weight;
                this.nodeA = nodeA;
                this.nodeB = nodeB;
                this.edgeIndex = edgeIndex;
            }

            boolean isBorder() {
                return maze.get(nodeA) ^ maze.get(nodeB);
            }

            int getWeight() {
                return weight;
            }

            void clearEdge() {
                maze.clear(nodeA);
                maze.clear(nodeB);
                maze.clear(edgeIndex);
            }
        }
    }
  learner_created: true
- name: src/maze/ui/Menu.java
  visible: true
  text: |-
    package maze.ui;

    import java.util.EnumMap;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.Scanner;

    import static java.text.MessageFormat.format;

    public class Menu implements Runnable {

        protected final LinkedHashMap<String, MenuEntry> menu = new LinkedHashMap<>();
        private final Map<Property, String> properties = new EnumMap<>(Property.class);

        protected boolean isOnlyOnce;

        public Menu() {

        }

        public Menu(String title) {
            set(Property.TITLE, title);
        }

        public Menu set(Property key, String value) {
            properties.put(key, value);
            return this;
        }

        public Menu add(String key, String description, Runnable action) {
            menu.put(key, new MenuEntry(description, action));
            return this;
        }

        public Menu add(String description, Runnable action) {
            return this.add(String.valueOf(menu.size() + 1), description, action);
        }

        public Menu onlyOnce() {
            isOnlyOnce = true;
            return this;
        }

        public Menu addExit() {
            menu.put(get(Property.EXIT_KEY), new MenuEntry(get(Property.EXIT), this::onlyOnce));
            return this;
        }

        public void clear() {
            menu.clear();
        }

        @Override
        public void run() {
            do {
                System.out.println();
                System.out.println(get(Property.TITLE));
                menu.forEach((key, entry) -> System.out.println(format(get(Property.FORMAT), key, entry)));
                final var key = new Scanner(System.in).nextLine().toLowerCase();
                System.out.println();
                menu.getOrDefault(key, new MenuEntry("Error",
                        () -> System.out.println(format(get(Property.ERROR), menu.size())))
                ).run();
            } while (!isOnlyOnce);
        }

        protected String get(Property property) {
            return properties.getOrDefault(property, property.getValue());
        }

        public enum Property {
            TITLE("Choose your action:"),
            FORMAT("{0}. {1}"),
            ERROR("Please enter the number from 0 up to {0}"),
            EXIT("Exit"),
            EXIT_KEY("0");

            private final String value;

            Property(String value) {
                this.value = value;
            }

            public String getValue() {
                return value;
            }
        }

        protected static final class MenuEntry implements Runnable {
            private final String description;
            private final Runnable action;

            MenuEntry(final String description, final Runnable action) {
                this.description = description;
                this.action = action;
            }

            @Override
            public String toString() {
                return description;
            }

            @Override
            public void run() {
                action.run();
            }
        }

    }
  learner_created: true
- name: src/maze/Application.java
  visible: true
  text: |-
    package maze.ui;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.dataformat.xml.XmlMapper;
    import maze.Maze;

    import java.io.File;
    import java.io.IOException;
    import java.util.Scanner;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class Application {
        private static final Logger LOG = Logger.getLogger(Application.class.getName());
        private static final ObjectMapper MAPPER = new XmlMapper();

        private final Scanner scanner = new Scanner(System.in);
        private final Menu menu = new Menu("=== Menu ===")
                .set(Menu.Property.ERROR, "Incorrect option. Please try again");
        private Maze maze;

        public void startMenu() {
            addStartMenu();
            menu.addExit();
            menu.run();
        }

        private void addStartMenu() {
            menu.add("Generate a new maze", this::generateMaze);
            menu.add("Load a maze", this::loadMaze);
        }

        private void enableFullMenu() {
            menu.clear();
            addStartMenu();
            menu.add("Save the maze", this::save);
            menu.add("Display the maze", () -> System.out.println(maze));
            menu.addExit();
        }

        private void generateMaze() {
            System.out.println("Please, enter the size of a maze");
            final var size = Integer.parseInt(scanner.nextLine());
            maze = new Maze(size, size).generate();
            System.out.println(maze);
            enableFullMenu();
        }

        private void loadMaze() {
            try {
                maze = MAPPER.readValue(askFile(), Maze.class);
                LOG.info("The maze has loaded successful.");
                enableFullMenu();
            } catch (IOException error) {
                LOG.log(Level.WARNING, "The maze has not been loaded.", error);
            }
        }

        private void save() {
            try {
                MAPPER.writerWithDefaultPrettyPrinter().writeValue(askFile(), maze);
                LOG.info("The maze has saved successful.");
            } catch (IOException error) {
                LOG.log(Level.SEVERE, "Could not save the maze.", error);
            }
        }

        private File askFile() {
            System.out.println("Enter the file name:");
            final var fileName = scanner.nextLine();
            LOG.log(Level.INFO, "The file name is {0}", fileName);
            return new File(fileName);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5396#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 16 Feb 2022 14:28:59 UTC
record: -1
