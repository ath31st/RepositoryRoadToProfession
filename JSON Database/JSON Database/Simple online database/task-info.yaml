type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;
    import java.util.Scanner;

    public class Client {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34552;

        public static void createClientSocket() {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream())
            ) {
                System.out.println("Client started!");
    //            Scanner scanner = new Scanner(System.in);
    //            String msg = scanner.nextLine();

                String msg = "Give me a record # 12";
                output.writeUTF(msg); // sending message to the server
                System.out.println("Sent: " + msg);
                String receivedMsg = input.readUTF(); // response message
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Problem with client");
            }
        }
    }
  learner_created: true
- name: src/client/OldMain.java
  visible: true
  text: |
    //package client;
    //
    //import java.util.Scanner;
    //
    //public class OldMain {
    //    private static String[] dataBase = new String[101];
    //    private static String[] inputStringArguments;
    //    private static String command = "";
    //    private static int index = 0;
    //    private static String text = "";
    //
    //    public static void main(String[] args) {
    //
    //    }
    //
    //    public static void run() {
    //        while (!command.equals("exit")) {
    //            inputCommand();
    //            parsingInputString();
    //            executingCommand(dataBase);
    //        }
    //    }
    //
    //    public static void inputCommand() {
    //        Scanner scanner = new Scanner(System.in);
    //        inputStringArguments = scanner.nextLine().split(" ", 3);
    //    }
    //
    //    public static void parsingInputString() {
    //        if (inputStringArguments.length == 3) {
    //            command = inputStringArguments[0];
    //            index = Integer.parseInt(inputStringArguments[1]);
    //            text = inputStringArguments[2];
    //        } else if (inputStringArguments.length == 2) {
    //            command = inputStringArguments[0];
    //            index = Integer.parseInt(inputStringArguments[1]);
    //        } else if (inputStringArguments.length == 1) {
    //            command = inputStringArguments[0];
    //        }
    //    }
    //
    //    public static void executingCommand(String[] dataBase) {
    //        boolean isRangeIndex = index > 0 & index < 101;
    //        if (command.equals("set")) {
    //            if (isRangeIndex) {
    //                dataBase[index] = text;
    //                System.out.println("OK");
    //            } else {
    //                System.out.println("ERROR");
    //            }
    //        } else if (command.equals("get")) {
    //            if ((!(dataBase[index] == null)) & isRangeIndex) {
    //                System.out.println(dataBase[index]);
    //            } else {
    //                System.out.println("ERROR");
    //            }
    //        } else if (command.equals("delete")) {
    //            if (isRangeIndex) {
    //                dataBase[index] = null;
    //                System.out.println("OK");
    //            } else {
    //                System.out.println("ERROR");
    //            }
    //        }
    //    }
    //}
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import client.Client;
    import com.google.gson.internal.bind.util.ISO8601Utils;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class Server {
        private static final int PORT = 34552;

        public static void createServerSocket() {
            try (ServerSocket server = new ServerSocket(PORT)) {
                System.out.println("Server started!");
                //while (true)
                    try (
                            Socket socket = server.accept();
                            DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                            DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream())
                    ) {
                        String msg = inputStream.readUTF();
                        System.out.println("Received: " + msg);
                        String outputMsg = "A record # 12 was sent!";
                        outputStream.writeUTF(outputMsg);
                        System.out.println("Sent: " + outputMsg);
                    }
            } catch (IOException e) {
                //e.printStackTrace();
                System.out.println("Problem with server");
            }
        }
    }
  learner_created: true
- name: src/util/Command.java
  visible: true
  learner_created: true
- name: src/util/JParserArguments.java
  visible: true
  learner_created: true
- name: src/util/Controller.java
  visible: true
  learner_created: true
- name: src/util/Set.java
  visible: true
  learner_created: true
- name: src/util/Get.java
  visible: true
  learner_created: true
- name: src/util/Delete.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 08 Mar 2022 18:25:02 UTC
record: -1
