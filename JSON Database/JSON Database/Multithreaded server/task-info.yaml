type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/util/Controller.java
  visible: true
  text: |
    package util;

    public class Controller {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public void executeCommand() {
            command.execute();
        }

    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import util.JParserArguments;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    import static util.JParserArguments.*;

    public class Client {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34552;

        public static void createClientSocket(String[] args) {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                System.out.println("Client started!");

                JParserArguments.parse(args);

                GsonClientObject gsonClientObject = new GsonClientObject(getTypeRequest(), getKey(), getValueForDataBase());
                GsonBuilder gsonBuilder = new GsonBuilder();
                Gson gson = gsonBuilder
                        //.setPrettyPrinting()
                        //.serializeNulls()
                        .excludeFieldsWithoutExposeAnnotation()
                        .create();
                String jsonGsonObject = gson.toJson(gsonClientObject);

                output.writeUTF(jsonGsonObject); // sending message to the server
                System.out.println("Sent: " + jsonGsonObject);
                String receivedMsg = input.readUTF(); // response message
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Problem with client");
            }
        }
    }
  learner_created: true
- name: src/util/DeleteCommand.java
  visible: true
  text: |
    package util;

    import client.GsonClientObject;
    import server.GsonServerObject;

    import java.util.HashMap;
    import java.util.Map;

    public class DeleteCommand implements Command{
        private Map<String , String> db;
        private GsonClientObject gsonClientObject;
        private GsonServerObject gsonServerObject;

        public DeleteCommand(HashMap<String,String> db, GsonClientObject gsonClientObject, GsonServerObject gsonServerObject) {
            this.db = db;
            this.gsonClientObject = gsonClientObject;
            this.gsonServerObject = gsonServerObject;
        }

        @Override
        public void execute() {
            if (db.containsKey(gsonClientObject.getKey())) {
                db.remove(gsonClientObject.getKey());
                gsonServerObject.setResponse("OK");
            } else {
                gsonServerObject.setResponse("ERROR");
                gsonServerObject.setReason("No such key");
            }
        }
    }
  learner_created: true
- name: src/util/JParserArguments.java
  visible: true
  text: |+
    package util;

    import com.beust.jcommander.JCommander;
    import com.beust.jcommander.Parameter;

    import java.util.ArrayList;
    import java.util.List;

    public class JParserArguments {

        @Parameter
        private List<String> parameters = new ArrayList<>();

        @Parameter(names = "-t", description = "is the type of the request")
        private static String typeRequest;

        @Parameter(names = "-k", description = "is the key")
        private static String key;

        @Parameter(names = "-v", description = "is the value to save in the database")
        private static String valueForDataBase;

        public static String getTypeRequest() {
            return typeRequest;
        }

        public static String getKey() {
            return key;
        }

        public static String getValueForDataBase() {
            return valueForDataBase;
        }

        public static void parse(String[] args) {
            JParserArguments parser = new JParserArguments();
            JCommander.newBuilder()
                    .addObject(parser)
                    .build()
                    .parse(args);
        }
    }

  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import client.GsonClientObject;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import util.*;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;

    public class Server {
        private static final int PORT = 34552;
        private static HashMap<String, String> db = new HashMap<>();
        static boolean isServerActive = true;

        public static void setIsServerActive(boolean isServerActive) {
            Server.isServerActive = isServerActive;
        }

        public static void createServerSocket() {
            Controller controller = new Controller();
            try (ServerSocket server = new ServerSocket(PORT)) {
                System.out.println("Server started!");

                while (isServerActive) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                            DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream())
                    ) {
                        GsonClientObject gsonClientObject = new Gson().fromJson(inputStream.readUTF(), GsonClientObject.class);
                        GsonServerObject gsonServerObject = new GsonServerObject();
                        controller.setCommand(switchCommand(gsonClientObject, gsonServerObject));
                        controller.executeCommand();
                        GsonBuilder gsonBuilder = new GsonBuilder();
                        Gson gson = gsonBuilder
                                //.setPrettyPrinting()
                                .excludeFieldsWithoutExposeAnnotation()
                                .create();
                        outputStream.writeUTF(gson.toJson(gsonServerObject));
                    }
                }
            } catch (
                    IOException e) {
                //e.printStackTrace();
                System.out.println("Problem with server");
            }
        }

        public static Command switchCommand(GsonClientObject gsonClientObject, GsonServerObject gsonServerObject) {
            Command command;
            if (gsonClientObject.getType().equals("get")) {
                return command = new GetCommand(db, gsonClientObject, gsonServerObject);
            } else if (gsonClientObject.getType().equals("set")) {
                return command = new SetCommand(db, gsonClientObject, gsonServerObject);
            } else if (gsonClientObject.getType().equals("delete")) {
                return command = new DeleteCommand(db, gsonClientObject, gsonServerObject);
            } else {
                return command = new ExitCommand();
            }
        }
    }
  learner_created: true
- name: src/util/GetCommand.java
  visible: true
  text: |
    package util;

    import client.GsonClientObject;
    import server.GsonServerObject;

    import java.util.HashMap;
    import java.util.Map;

    public class GetCommand implements Command {
        private Map<String , String> db;
        private GsonClientObject gsonClientObject;
        private GsonServerObject gsonServerObject;

        public GetCommand(HashMap<String, String> db, GsonClientObject gsonClientObject, GsonServerObject gsonServerObject) {
            this.db = db;
            this.gsonClientObject = gsonClientObject;
            this.gsonServerObject = gsonServerObject;
        }

        @Override
        public void execute() {
            if (db.containsKey(gsonClientObject.getKey())) {
                gsonServerObject.setResponse("OK");
                gsonServerObject.setValue(db.get(gsonClientObject.getKey()));
            } else {
                gsonServerObject.setResponse("ERROR");
                gsonServerObject.setReason("No such key");
            }
        }
    }
  learner_created: true
- name: src/util/ExitCommand.java
  visible: true
  text: |
    package util;

    import server.Server;

    public class ExitCommand implements Command{

        @Override
        public void execute() {
            Server.setIsServerActive(false);
        }
    }
  learner_created: true
- name: src/server/GsonServerObject.java
  visible: true
  text: |
    package server;

    import com.google.gson.annotations.Expose;

    public class GsonServerObject {
        @Expose
        private String response;
        @Expose
        private String reason;
        @Expose
        private String value;

        public void setResponse(String response) {
            this.response = response;
        }

        public void setReason(String reason) {
            this.reason = reason;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public GsonServerObject() {

        }

        public GsonServerObject(String response, String reason, String value) {
            this.response = response;
            this.reason = reason;
            this.value = value;
        }
    }
  learner_created: true
- name: src/util/Command.java
  visible: true
  text: |
    package util;

    public interface Command {
       void execute();
    }
  learner_created: true
- name: src/util/SetCommand.java
  visible: true
  text: |
    package util;

    import client.GsonClientObject;
    import server.GsonServerObject;

    import java.util.HashMap;
    import java.util.Map;

    public class SetCommand implements Command {
        private Map<String, String> db;
        private GsonClientObject gsonClientObject;
        private GsonServerObject gsonServerObject;

        public SetCommand(HashMap<String, String> db, GsonClientObject gsonClientObject, GsonServerObject gsonServerObject) {
            this.db = db;
            this.gsonClientObject = gsonClientObject;
            this.gsonServerObject = gsonServerObject;
        }

        @Override
        public void execute() {
            db.put(gsonClientObject.getKey(), gsonClientObject.getValue());
            gsonServerObject.setResponse("OK");
        }
    }
  learner_created: true
- name: src/client/GsonClientObject.java
  visible: true
  text: |
    package client;

    import com.google.gson.annotations.Expose;

    public class GsonClientObject {
        @Expose
        private String type;
        @Expose
        private String key;
        @Expose
        private String value;


        public String getType() {
            return type;
        }

        public String getKey() {
            return key;
        }

        public String getValue() {
            return value;
        }


        public GsonClientObject(String type, String key, String value) {
            this.type = type;
            this.key = key;
            this.value = value;
        }
    }
  learner_created: true
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
- name: src/server/data/db.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5494#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 12 Mar 2022 08:28:20 UTC
record: -1
