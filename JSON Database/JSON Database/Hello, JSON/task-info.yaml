type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

    }
  learner_created: false
- name: src/util/Controller.java
  visible: true
  text: |
    package util;

    public class Controller {
        private Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public void executeCommand() {
            command.execute();
        }

    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import util.JParserArguments;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Client {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34552;

        public static void createClientSocket(String[] args) {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream())
            ) {
                System.out.println("Client started!");

                String msg = JParserArguments.parseToString(args);
                String rawMsg = String.join(";", args);
                output.writeUTF(rawMsg); // sending message to the server
                System.out.println("Sent: " + msg);
                String receivedMsg = input.readUTF(); // response message
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Problem with client");
            }
        }
    }
  learner_created: true
- name: src/util/JParserArguments.java
  visible: true
  text: |+
    package util;

    import com.beust.jcommander.JCommander;
    import com.beust.jcommander.Parameter;

    import java.util.ArrayList;
    import java.util.List;

    //-t set -i 148 -m Here is some text to store on the server
    //-t is the type of the request, and -i is the index of the cell.
    //-m is the value to save in the database: you only need it in case of a set request.

    public class JParserArguments {

        @Parameter
        private List<String> parameters = new ArrayList<>();

        @Parameter(names = "-t", description = "is the type of the request")
        private static String typeRequest = "";

        @Parameter(names = "-i", description = "is the index of the cell")
        private static String indexCell = "";

        @Parameter(names = "-m", description = "is the value to save in the database")
        private static String valueForDataBase = "";

        public static String getTypeRequest() {
            return typeRequest;
        }

        public static String getIndexCell() {
            return indexCell;
        }

        public static String getValueForDataBase() {
            return valueForDataBase;
        }

        public static void parse(String[] args) {
            JParserArguments parser = new JParserArguments();
            JCommander.newBuilder()
                    .addObject(parser)
                    .build()
                    .parse(args);
        }

        public static String parseToString(String[] args) {
            parse(args);
            return typeRequest + " " + indexCell + " " + valueForDataBase;
        }
    }

  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import util.*;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;

    import static util.JParserArguments.*;

    public class Server {
        private static final int PORT = 34552;
        private static HashMap<Integer, String> db = new HashMap<>(1000);

        public static void createServerSocket() {
            Controller controller = new Controller();
            try (ServerSocket server = new ServerSocket(PORT)) {
                System.out.println("Server started!");
                boolean isServerActive = true;
                while (isServerActive) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream inputStream = new DataInputStream(socket.getInputStream());
                            DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream())
                    ) {
                        String msg = inputStream.readUTF();
                        String outputMsg;
                        if (!msg.equals("-t;exit")) {
                            Command command;
                            parse(msg.split(";"));
                            if (Integer.parseInt(getIndexCell()) < 1000 & Integer.parseInt(getIndexCell()) > 0) {
                                if (getTypeRequest().equals("get")) {
                                    command = new Get(db, Integer.parseInt(getIndexCell()));
                                    controller.setCommand(command);
                                    controller.executeCommand();
                                    if (Get.result.equals("")) {
                                        outputStream.writeUTF("ERROR");
                                    } else outputStream.writeUTF(Get.result);

                                } else if (getTypeRequest().equals("set")) {
                                    command = new Set(db, Integer.parseInt(getIndexCell()), getValueForDataBase());
                                    controller.setCommand(command);
                                    controller.executeCommand();
                                    outputStream.writeUTF("OK");
                                } else if (getTypeRequest().equals("delete")) {
                                    command = new Delete(db, Integer.parseInt(getIndexCell()));
                                    controller.setCommand(command);
                                    controller.executeCommand();
                                    outputStream.writeUTF("OK");
                                }
                            } else outputStream.writeUTF("ERROR");

                        } else {
                            System.out.println("OK");
                            isServerActive = false;
                        }
                    }
                }
            } catch (IOException e) {
                //e.printStackTrace();
                System.out.println("Problem with server");
            }
        }
    }
  learner_created: true
- name: src/util/Command.java
  visible: true
  text: |
    package util;

    public interface Command {
       void execute();
    }
  learner_created: true
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/util/ExitCommand.java
  visible: true
  learner_created: true
- name: src/util/DeleteCommand.java
  visible: true
  text: |
    package util;

    import java.util.HashMap;
    import java.util.Map;

    public class Delete implements Command{
        private Map<Integer, String> db;
        private int index;

        public Delete(HashMap<Integer,String> db, int index) {
            this.db = db;
            this.index = index;
        }

        @Override
        public void execute() {
            db.remove(index);
        }
    }
  learner_created: true
- name: src/util/GetCommand.java
  visible: true
  text: |
    package util;

    import java.util.HashMap;
    import java.util.Map;

    public class Get implements Command {
        private Map<Integer, String> db;
        private int index;
        public static String result = "";

        public Get(HashMap<Integer, String> db, int index) {
            this.db = db;
            this.index = index;
        }

        @Override
        public void execute() {
            result = db.getOrDefault(index, "");
        }
    }
  learner_created: true
- name: src/util/SetCommand.java
  visible: true
  text: |
    package util;

    import java.util.HashMap;
    import java.util.Map;

    public class Set implements Command {
        private Map<Integer, String> db;
        private int index;
        private String value;

        public Set(HashMap<Integer,String> db, int index, String value) {
            this.db = db;
            this.index = index;
            this.value = value;
        }

        @Override
        public void execute() {
            db.put(index,value);
        }
    }
  learner_created: true
- name: src/client/GsonClientObject.java
  visible: true
  learner_created: true
- name: src/server/GsonServerObject.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5493#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 11 Mar 2022 09:51:16 UTC
record: 4
