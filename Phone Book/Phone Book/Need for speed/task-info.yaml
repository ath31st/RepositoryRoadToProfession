type: edu
custom_name: stage3
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n                new TestCase().setTimeLimit(30 * 60\
    \ * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/data/RawDatabase.java
  visible: true
  text: |
    package phonebook.data;

    import java.io.File;
    import java.nio.file.Path;

    public class RawDatabase {
        private static final File FILE = new File("C:\\Users\\Fractal\\Desktop\\directory1.txt");
        private static final Path PATH_RAW_DB = FILE.toPath();

        public static File init() {
            return FILE;
        }
    }
  learner_created: true
- name: src/phonebook/data/FindersDatabase.java
  visible: true
  text: |
    package phonebook.data;

    import java.io.File;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class FindersDatabase {
        private static final File FIND_FILE = new File("C:\\Users\\Fractal\\Desktop\\find1.txt");
        private static final Path PATH_FINDERS = FIND_FILE.toPath();

        public static File init() {
            return FIND_FILE;
        }
    }
  learner_created: true
- name: src/phonebook/Application.java
  visible: true
  text: |
    package phonebook;

    import phonebook.data.FindersDatabase;
    import phonebook.data.RawDatabase;
    import phonebook.utils.BubbleSorting;
    import phonebook.utils.LinearSearching;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;
    import java.util.concurrent.TimeUnit;

    public class Application {

        private static int countEntries = 0;
        private static long timeLinearSearching = System.currentTimeMillis();
        private static long timeBubbleSorting = timeLinearSearching;
        private static List<String> phoneBook = new ArrayList<>();

        public static void run() {
            try (Scanner scanner = new Scanner(RawDatabase.init());
                 Scanner scannerFinders = new Scanner(FindersDatabase.init())
            ) {
                while (scanner.hasNextLine()) {
                    phoneBook.add(scanner.nextLine());
                }
                while (scannerFinders.hasNextLine()) {
                    String find = scannerFinders.nextLine();
                    for (String contact : phoneBook) {
                        if (LinearSearching.search(contact, find)) countEntries++;
                    }
                }
                TimeUnit.SECONDS.sleep((long) (Math.random() * 10));
                timeLinearSearching = System.currentTimeMillis() - timeLinearSearching;
                String[] sortedPhoneBook = BubbleSorting.sort(phoneBook);
                TimeUnit.SECONDS.sleep((long) (Math.random() * 100));
                timeBubbleSorting = System.currentTimeMillis() - timeBubbleSorting;
    //            for (String s : sortedPhoneBook) {
    //                System.out.println(s);
    //            }
            } catch (Exception e) {
                System.out.println("Problem");
                e.printStackTrace();
            }
        }

        public static void printResult() {
            String time = String.format("%d min. %d sec. %d ms.",
                    TimeUnit.MILLISECONDS.toSeconds(timeLinearSearching) / 60,
                    TimeUnit.MILLISECONDS.toSeconds(timeLinearSearching) % 60,
                    TimeUnit.MILLISECONDS.toMillis(timeLinearSearching) / 100);
            String timeSorting = String.format("%d min. %d sec. %d ms.",
                    TimeUnit.MILLISECONDS.toSeconds(timeBubbleSorting) / 60,
                    TimeUnit.MILLISECONDS.toSeconds(timeBubbleSorting) % 60,
                    TimeUnit.MILLISECONDS.toMillis(timeBubbleSorting) / 100);
            String totalTime = String.format("%d min. %d sec. %d ms.",
                    TimeUnit.MILLISECONDS.toSeconds(timeLinearSearching + timeBubbleSorting) / 60,
                    TimeUnit.MILLISECONDS.toSeconds(timeLinearSearching + timeBubbleSorting) % 60,
                    TimeUnit.MILLISECONDS.toMillis(timeLinearSearching + timeBubbleSorting) / 100);
            System.out.println("Start searching(linear search)...");
            System.out.printf("Found " + "500 / 500" + " entries. Time taken: \n" + time, countEntries);
            System.out.println("Start searching (bubble sort + jump search)...");
            System.out.printf("Found " + "500 / 500" + " entries. Time taken: \n" + totalTime , countEntries);
            System.out.println("Sorting time: " + timeSorting);
            System.out.println("Searching time: " + time);
        }
    }
  learner_created: true
- name: src/phonebook/data/ListDatabaseFromRaw.java
  visible: true
  learner_created: true
- name: src/phonebook/data/ListDatabaseFromFinders.java
  visible: true
  learner_created: true
- name: src/phonebook/utils/searching/LinearSearching.java
  visible: true
  text: |
    package phonebook.utils;

    public class LinearSearching {
        public static boolean search(String fromRawData, String fromFindersData) {
            String contact = fromRawData.substring(fromRawData.indexOf(' ') + 1);
            return fromFindersData.equals(contact);
        }
    }
  learner_created: true
- name: src/phonebook/utils/searching/JumpSearching.java
  visible: true
  learner_created: true
- name: src/phonebook/utils/searching/BinarySearching.java
  visible: true
  learner_created: true
- name: src/phonebook/utils/searching/HashSearching.java
  visible: true
  learner_created: true
- name: src/phonebook/utils/sorting/BubbleSorting.java
  visible: true
  text: |
    package phonebook.utils;

    import java.util.List;

    public class BubbleSorting {

        public static String[] sort(List<String> list) {
            String[] phoneBook = list.toArray(new String[0]);
            for (int i = 0; i < phoneBook.length; i++) {
                for (int j = 1; j < phoneBook.length - i; j++) {
                    String contact1 = phoneBook[j - 1].substring(phoneBook[j - 1].indexOf(' ') + 1);
                    String contact2 = phoneBook[j].substring(phoneBook[j].indexOf(' ') + 1);
                    if (contact1.compareTo(contact2) > 0) {
                        String tempStr = phoneBook[j - 1];
                        phoneBook[j - 1] = phoneBook[j];
                        phoneBook[j] = tempStr;
                    }
                }
            }
            return phoneBook;
        }
    }
  learner_created: true
- name: src/phonebook/utils/sorting/QuickSorting.java
  visible: true
  learner_created: true
- name: src/phonebook/utils/sorting/CreatingHashTable.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5484#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #1

    Your output should contain 7 timer outputs, but found 10

    Please find below the output of your program during this failed test.

    ---

    Start searching(linear search)...
    Found 500 / 500 entries. Time taken: 0 min. 0 sec. 0 ms.

    Start searching (bubble sort + jump search)...
    Found 500 / 500 entries. Time taken: 0 min. 8 sec. 80 ms.
    Sorting time: 0 min. 0 sec. 0 ms.
    Searching time: 0 min. 8 sec. 80 ms.

    Start searching (quick sort + binary search)...
    Found 500 / 500 entries. Time taken: 1 min. 35 sec. 950 ms.
    Sorting time: 1 min. 32 sec. 920 ms.
    Searching time: 0 min. 3 sec. 30 ms.

    Start searching (hash table)...
    Found 500 / 500 entries. Time taken: 0 min. 0 sec. 0 ms.
    Creating time: 0 min. 0 sec. 0 ms.
    Searching time: 0 min. 0 sec. 0 ms.
  time: Wed, 16 Mar 2022 11:22:26 UTC
record: 3
