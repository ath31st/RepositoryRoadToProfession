type: edu
custom_name: stage6
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: src/sorting/SortingLines.java
  visible: true
  text: |
    package sorting;

    import java.util.*;
    import java.util.function.Function;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class SortingLines implements Sorting {

        @Override
        public void sorting() {

            List<String> strings = InputData.inputFromConsole();

            System.out.printf("\nTotal lines: %d.", strings.size());
            System.out.println("Sorted data: ");
            strings.stream().sorted().forEach(System.out::println);
        }

        @Override
        public void sortingByCount() {
            List<String> list = InputData.inputFromConsole();
            Map<String, Long> map = list.stream()
                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

            LinkedHashMap<String, Long> sortedByCount = map.entrySet()
                    .stream()
                    .sorted((Map.Entry.<String, Long>comparingByValue()).thenComparing(Map.Entry::getKey))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            printByCount(sortedByCount);
        }

        public static void printByCount(Map<String, Long> map) {
            int size = map.values().stream().mapToInt(Math::toIntExact).sum();
            System.out.printf("Total lines: %d.\n", size);
            for (Map.Entry<String, Long> entry : map.entrySet()) {
                int percent = (int) (long) entry.getValue() * 100 / size;
                System.out.printf("%s: %d time(s), %d%%\n",
                        entry.getKey(), entry.getValue(), percent);
            }
        }
    }
  learner_created: true
- name: src/sorting/CommandLineParser.java
  visible: true
  text: |-
    package sorting;

    import java.util.HashMap;
    import java.util.Map;

    class CommandLineParser {
        public static String parser(String[] args) {
            Map<String, String> map = new HashMap<>();
            if (args.length >= 2)
                for (int i = 1; i < args.length; i++) {
                    if (!args[i].startsWith("-") & args[i - 1].startsWith("-")) {
                        map.put(args[i - 1], args[i]);
                    }
                }
            if (map.containsKey("-dataType") & !map.containsKey("-sortingType")) {
                return map.get("-dataType") + "natural";
            } else if (map.containsKey("-dataType") & map.containsKey("-sortingType")) {
                return map.get("-dataType") + map.get("-sortingType");
            } else return "Wrong arguments";
        }
    }
  learner_created: true
- name: src/sorting/InputData.java
  visible: true
  text: |-
    package sorting;

    import java.io.*;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    public class InputData {

        private static List<String> list = new ArrayList<>();

        public static List<String> inputFromConsole() {
            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in))) {
                list = bufferedReader.lines().collect(Collectors.toList());
            } catch (Exception e) {
                System.out.println("Exception InputData");
            }
            return list;
        }

        public static List<String> inputFromFile(String filePath) {
            try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {
                list = bufferedReader.lines().collect(Collectors.toList());
            } catch (Exception e) {
                System.out.println("Exception InputData");
            }
            return list;
        }
    }
  learner_created: true
- name: src/sorting/SortingWords.java
  visible: true
  text: |
    package sorting;

    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.function.Function;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class SortingWords implements Sorting {

        private String longestWord;

        @Override
        public void sorting() {

            List<String> words = InputData.inputFromConsole()
                    .stream()
                    .flatMap(Pattern.compile("[^\\p{L}\\p{Digit}]+")::splitAsStream)
                    .filter(s -> !s.isEmpty())
                    .sorted()
                    .collect(Collectors.toList());

            System.out.printf("\nTotal words: %d.", words.size());
            System.out.print("Sorted data: ");
            words.forEach(s -> System.out.print(s + " "));

        }

        @Override
        public void sortingByCount() {
            List<String> list = InputData.inputFromConsole();
            Map<String, Long> map = list.stream()
                    .flatMap(Pattern.compile("[^\\p{L}\\p{Digit}-]+")::splitAsStream)
                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

            LinkedHashMap<String , Long> sortedByCount = map.entrySet()
                    .stream()
                    .sorted((Map.Entry.<String, Long>comparingByValue()).thenComparing(Map.Entry::getKey))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            printByCount(sortedByCount);
        }
        public static void printByCount(Map<String, Long> map) {
            int size = map.values().stream().mapToInt(Math::toIntExact).sum();
            System.out.printf("Total words: %d.\n", size);
            for (Map.Entry<String, Long> entry : map.entrySet()) {
                int percent = (int) (long) entry.getValue() * 100 / size;
                System.out.printf("%s: %d time(s), %d%%\n",
                        entry.getKey(), entry.getValue(), percent);
            }
        }
    }
  learner_created: true
- name: src/sorting/SortingNumbers.java
  visible: true
  text: |
    package sorting;

    import java.util.*;
    import java.util.function.Function;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;


    public class SortingNumbers implements Sorting {

        @Override
        public void sorting() {
            List<String> list = InputData.inputFromConsole();
            List<Integer> listInt = list.stream()
                    .flatMap(Pattern.compile("[^0-9-]+")::splitAsStream)
                    .map(Integer::parseInt)
                    .sorted()
                    .collect(Collectors.toList());
            System.out.printf("Total numbers: %d.\n", listInt.size());
            System.out.print("Sorted data: ");
            listInt.forEach(s -> System.out.print(s + " "));
        }

        @Override
        public void sortingByCount() {
            List<String> list = InputData.inputFromConsole();
            Map<Integer, Long> map = list.stream()
                    .flatMap(Pattern.compile("[^0-9-]+")::splitAsStream)
                    .map(Integer::parseInt)
                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

            LinkedHashMap<Integer, Long> sortedByCount = map.entrySet()
                    .stream()
                    .sorted(Map.Entry.comparingByValue())
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            printByCount(sortedByCount);
        }

        public static void printByCount(Map<Integer, Long> map) {
            int size = map.values().stream().mapToInt(Math::toIntExact).sum();
            System.out.printf("Total numbers: %d.\n", size);
            for (Map.Entry<Integer, Long> entry : map.entrySet()) {
                int percent = (int) (long) entry.getValue() * 100 / size;
                System.out.printf("%d: %d time(s), %d%%\n",
                        entry.getKey(), entry.getValue(), percent);
            }
        }
    }
  learner_created: true
- name: src/sorting/Application.java
  visible: true
  text: |
    package sorting;

    public class Application {

        public static void run(String[] args) {

            Sorting sorting = SortingGetterType.getType(args);

            if (CommandLineParser.parser(args).endsWith("byCount")) {
                sorting.sortingByCount();
            } else sorting.sorting(); //by natural
        }
    }
  learner_created: true
- name: src/sorting/SortingGetterType.java
  visible: true
  text: |
    package sorting;

    public class SortingGetterType {

        public static Sorting getType(String[] args) {
            String type = CommandLineParser.parser(args);

            if (type.startsWith("line")) {
                return new SortingLines();
            } else if (type.startsWith("word")) {
                return new SortingWords();
            } else if (type.startsWith("long")) {
                return new SortingNumbers();
            }
            return new SortingType();
        }

    }
  learner_created: true
- name: src/sorting/Sorting.java
  visible: true
  text: |
    package sorting;

    public interface Sorting {
        void sorting();

        void sortingByCount();
    }
  learner_created: true
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
            input: String,
            revealTest: Boolean,
            file: String,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(input, revealTest, args.toList()))
                .addArguments(*args)
                .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "input.txt",
                        "-sortingType", "byCount", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "data.dat",
                        "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "input.txt",
                        "-sortingType", "natural", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "data.dat",
                        "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: out.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5386#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 23 Feb 2022 10:48:53 UTC
record: -1
