type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.stereotype.Component;


    @Component
    public class Seat {

        private int row;
        private int column;
        private int price;
        private boolean isPurchased;

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @JsonIgnore
        public boolean isPurchased() {
            return isPurchased;
        }

        public void setPurchased(boolean purchased) {
            isPurchased = purchased;
        }
    }
  learner_created: true
- name: src/cinema/SeatsService.java
  visible: true
  text: |
    package cinema;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.beans.factory.annotation.Qualifier;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.util.*;

    @Service
    public class SeatsService {
        @Autowired
        @Qualifier("seats")
        private final List<Seat> seats;
        @Autowired
        @Qualifier("tickets")
        private final HashMap<UUID, Seat> tickets;

        public SeatsService(List<Seat> seats, HashMap<UUID, Seat> tickets) {
            this.seats = seats;
            this.tickets = tickets;
        }

        private Optional<Seat> findSeat(Seat seat) {
            return seats.stream()
                    .filter(seat1 -> seat.getRow() == seat1.getRow() & seat.getColumn() == seat1.getColumn())
                    .findFirst();
        }

        public List<Seat> getSeats() {
            return seats;
        }

        public ResponseEntity<Ticket> purchaseTicket(Seat seat) {
            if (findSeat(seat).isPresent()) {
                if (!findSeat(seat).get().isPurchased()) {
                    Seat tmpSeat = findSeat(seat).get();
                    seats.remove(tmpSeat);
                    tmpSeat.setPurchased(true);
                    seats.add(tmpSeat);

                    UUID uuid = UUID.randomUUID();
                    Ticket ticket = new Ticket(uuid, tmpSeat);
                    tickets.put(uuid, tmpSeat);
                    return ResponseEntity.ok().body(ticket);
                } else {
                    return new ResponseEntity(Map.of("error", "The ticket has been already purchased!"), HttpStatus.BAD_REQUEST);
                }
            } else {
                return new ResponseEntity(Map.of("error", "The number of a row or a column is out of bounds!"), HttpStatus.BAD_REQUEST);
            }
        }

        public ResponseEntity returnedTicket(Ticket ticket) {
            UUID token = ticket.getToken();
            if (tickets.containsKey(token)) {
                return ResponseEntity.ok().body(Map.of("returned_ticket",tickets.get(token)));
            } else {
                return new ResponseEntity(Map.of("error", "Wrong token!"), HttpStatus.BAD_REQUEST);

            }
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.stereotype.Component;

    import java.util.UUID;

    @Component
    @JsonIgnoreProperties(ignoreUnknown = true)
    public class Ticket {
        private UUID token;
        private Seat seat;

        public Ticket() {
        }

        public Ticket(UUID token, Seat seat) {
            this.token = token;
            this.seat = seat;
        }

        public UUID getToken() {
            return token;
        }

        @JsonProperty(value = "ticket")
        public Seat getSeat() {
            return seat;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public void setSeat(Seat seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.stereotype.Component;

    import java.util.List;

    @Component
    public class CinemaRoom {
        private final int totalRows = 9;
        private final int totalColumns = 9;
        @JsonIgnore
        private final int priceTicketFirstFourRows = 10;
        @JsonIgnore
        private final int priceTicketAfterFourRows = 8;
        private List<Seat> availableSeats;

        public int getTotalRows() {
            return totalRows;
        }


        public int getTotalColumns() {
            return totalColumns;
        }

        public int getPriceTicketFirstFourRows() {
            return priceTicketFirstFourRows;
        }

        public int getPriceTicketAfterFourRows() {
            return priceTicketAfterFourRows;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/Controller.java
  visible: true
  text: |
    package cinema;


    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.UUID;

    @RestController
    public class Controller {
        @Autowired
        CinemaRoom cinemaRoom;
        @Autowired
        SeatsService seatsService;

        @GetMapping("/seats")
        public CinemaRoom getSeats() {
            cinemaRoom.setAvailableSeats(seatsService.getSeats());
            return cinemaRoom;
        }

        @PostMapping("/purchase")
        public ResponseEntity<Ticket> getTicket(@RequestBody Seat seat) {
            return seatsService.purchaseTicket(seat);
        }
        @PostMapping("/return")
        public ResponseEntity returnTicket(@RequestBody Ticket ticket){
            return seatsService.returnedTicket(ticket);
        }

    }
  learner_created: true
- name: src/cinema/Config.java
  visible: true
  text: |
    package cinema;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    import java.util.*;

    @Configuration
    public class Config {
        @Autowired
        private CinemaRoom cinemaRoom;

        @Bean
        public List<Seat> seats() {
            List<Seat> seats = new ArrayList<>();
            for (int i = 1; i <= cinemaRoom.getTotalRows(); i++) {
                for (int j = 1; j <= cinemaRoom.getTotalColumns(); j++) {
                    if (i <= 4) {
                        seats.add(new Seat(i, j, cinemaRoom.getPriceTicketFirstFourRows()));
                    } else {
                        seats.add(new Seat(i, j, cinemaRoom.getPriceTicketAfterFourRows()));
                    }
                }
            }
            return seats;
        }
        @Bean
        public HashMap<UUID,Seat> tickets(){
           return new HashMap<>();
        }
    }
  learner_created: true
- name: src/cinema/StatService.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 22 May 2022 12:34:58 UTC
record: -1
