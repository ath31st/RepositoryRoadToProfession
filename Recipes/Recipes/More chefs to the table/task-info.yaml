type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    #datasource settings
    spring.datasource.url=jdbc:h2:file:../recipes_db
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=password

    #data settings
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    #console settings
    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false
    spring.jpa.show-sql=false
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
    }
  learner_created: false
- name: src/recipes/Controller.java
  visible: true
  text: |
    package recipes;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;

    @RestController
    public class Controller {

        @Autowired
        RecipeService recipeService;

        @GetMapping("/api/recipe/{id}")
        public Recipe getRecipe(@PathVariable Long id) {
            return recipeService.findRecipeById(id);
        }

        @PostMapping("/api/recipe/new")
        public String saveNewRecipe(@Valid @RequestBody Recipe recipe) {
            return recipeService.addNewRecipe(recipe);
        }

        @DeleteMapping("/api/recipe/{id}")
        public ResponseEntity deleteRecipeById(@PathVariable Long id) {
            return recipeService.deleteRecipeById(id);
        }
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";
        final String API_REGISTER = "/api/register";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();

        final String CATEGORY = "category";
        final String NAME = "name";

        final static Gson gson = new Gson();

        final String[] MAIN_LOGIN_PASS = {"LoginTest2@test.com", "Test2222222"};
        final String[] ADDITIONAL_LOGIN_PASS_1 = {"LoginTest1@test.com", "Test1111"};
        final String[] ADDITIONAL_LOGIN_PASS_2 = {"LoginTest3@test.com", "Test33333333333"};

        final String[] INCORRECT_LOGIN_CORRECT_PASS_1 = {"Test3@testcom", "Test3333"};
        final String[] INCORRECT_LOGIN_CORRECT_PASS_2 = {"Test4test.com", "Test44444444"};

        final String[] CORRECT_LOGIN_INCORRECT_PASS_1 = {"Test5@test.com", "Test555"};
        final String[] CORRECT_LOGIN_INCORRECT_PASS_2 = {"Test6@test.com", "        "};

        final String[] UNREGISTERED_LOGIN_PASS = {"abc@test.com", "password99"};


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        public HttpRequest addAuthUnregisteredUser(HttpRequest request) {
            return request.basicAuth(UNREGISTERED_LOGIN_PASS[0], UNREGISTERED_LOGIN_PASS[1]);
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 400),
            () -> testPostRegister(MAIN_LOGIN_PASS, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_2, 200),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_1, 400),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_2, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_1, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_2, 400),

            // Tests with authentication
            () -> testPostRecipe(JSON_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostRecipe(JSON_RECIPES[1], MAIN_LOGIN_PASS),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testDeleteRecipe(recipeIds.get(0), MAIN_LOGIN_PASS),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14], MAIN_LOGIN_PASS);
            },

            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", MAIN_LOGIN_PASS),

            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2", MAIN_LOGIN_PASS),

            () -> testGetRecipesBadRequestStatusCode(0, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(1, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(2, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(5, MAIN_LOGIN_PASS),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),
            this::reloadServer,

            // Use second registered user to check if endpoints are available.
            () -> testPostRecipe(JSON_RECIPES[0], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", ADDITIONAL_LOGIN_PASS_1),
            // Use third registered user to check forbidden status code.
            () -> testDeleteRecipeForbiddenStatusCode(recipeIds.get(1), ADDITIONAL_LOGIN_PASS_2),
            () -> testUpdateRecipeForbiddenStatusCode(recipeIds.get(1), JSON_RECIPES[2], ADDITIONAL_LOGIN_PASS_2),

            // unregistered login and pass
            () -> testPostRecipeUnregisteredUser(JSON_RECIPES[0]),
            () -> testGetRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testUpdateRecipeUnregisteredUser(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedUnregisteredUser("dessert"),
            () -> testGetRecipesByNameContainsSortedUnregisteredUser("ice-cream"),

            // without authentication
            () -> testPostRecipeNoAuth(JSON_RECIPES[0]),
            () -> testGetRecipeNoAuth(recipeIds.get(0)),
            () -> testUpdateRecipeNoAuth(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeNoAuth(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedNoAuth("dessert"),
            () -> testGetRecipesByNameContainsSortedNoAuth("ice-cream")
        };

        CheckResult testPostRegister(String[] loginAndPass, int statusCode) {
            final String JSON_LOGIN_PASS = "{\"email\":\"" + loginAndPass[0] + "\",\"password\":\"" + loginAndPass[1] + "\"}";

            HttpResponse response = post(API_REGISTER, JSON_LOGIN_PASS).send();

            throwIfIncorrectStatusCode(response, statusCode);

            return correct();
        }

        // Tests with authentication
        CheckResult testPostRecipe(String jsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).basicAuth(loginPass[0], loginPass[1]).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests with authentication
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams, String[] loginPass) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testDeleteRecipeForbiddenStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        CheckResult testUpdateRecipeForbiddenStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        // Not registered user tests
        CheckResult testPostRecipeUnregisteredUser(String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(post(API_RECIPE_NEW, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeUnregisteredUser(int recipeId, String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(put(API_RECIPE + recipeId, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(delete(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        // No authentication tests
        CheckResult testPostRecipeNoAuth(String jsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeNoAuth(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeNoAuth(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeNoAuth(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/entites/Recipe.java
  visible: true
  text: |
    package recipes;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.List;

    @Entity
    public class Recipe {
        @JsonIgnore
        @Id
        @GeneratedValue
        private Long id;
        @NotBlank
        private String name;
        @NotBlank
        private String description;

        @NotNull
        @ElementCollection
        @Size(min = 1, max = 100)
        private List<String> ingredients = new java.util.ArrayList<>();
        @NotNull
        @ElementCollection
        @Size(min = 1, max = 100)
        private List<String> directions = new java.util.ArrayList<>();

        public Recipe() {
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public List<String> getIngredients() {
            return ingredients;
        }

        public void setIngredients(List<String> ingredients) {
            this.ingredients = ingredients;
        }

        public List<String> getDirections() {
            return directions;
        }

        public void setDirections(List<String> directions) {
            this.directions = directions;
        }
    }
  learner_created: false
- name: src/recipes/entites/User.java
  visible: true
  learner_created: true
- name: src/recipes/repositories/UserRepository.java
  visible: true
  learner_created: true
- name: src/recipes/repositories/RecipeRepository.java
  visible: true
  text: |
    package recipes;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RecipeRepository extends CrudRepository<Recipe,Long> {
    }
  learner_created: false
- name: src/recipes/servicies/UserService.java
  visible: true
  learner_created: true
- name: src/recipes/servicies/UserDetailsServiceImpl.java
  visible: true
  learner_created: true
- name: src/recipes/servicies/UserDetailsImpl.java
  visible: true
  learner_created: true
- name: src/recipes/servicies/RecipeService.java
  visible: true
  text: |
    package recipes;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    @Service
    public class RecipeService {

        private final RecipeRepository recipeRepository;

        public RecipeService(RecipeRepository recipeRepository) {
            this.recipeRepository = recipeRepository;
        }

        public Recipe findRecipeById(Long id) {
            return recipeRepository.findById(id)
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        }

        public String addNewRecipe(Recipe recipe) {
            if (recipe.getDirections().stream().anyMatch(String::isBlank) |
                    recipe.getIngredients().stream().anyMatch(String::isBlank)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
            recipeRepository.save(recipe);
            return "{\"id\": " + recipe.getId() + "}";
        }

        public ResponseEntity deleteRecipeById(Long id) {
            if (recipeRepository.findById(id).isPresent()) {
                recipeRepository.deleteById(id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }


    }
  learner_created: false
- name: src/recipes/securityconfig/IAuthenticationFacade.java
  visible: true
  learner_created: true
- name: src/recipes/securityconfig/WebSecurityConfigurerImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/921/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #69

    PUT /api/recipe/5 should respond with status code 403, responded: 204

    Response body:

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-04-20 15:59:38.302  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17.0.1 on Fractal with PID 944 (started by Fractal in D:\RepositoryRoadToProfession\Recipes\Recipes\task)
    2022-04-20 15:59:38.305  INFO 944 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2022-04-20 15:59:39.294  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-04-20 15:59:39.354  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 49 ms. Found 2 JPA repository interfaces.
    2022-04-20 15:59:39.964  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2022-04-20 15:59:39.978  INFO 944 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-04-20 15:59:39.978  INFO 944 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-04-20 15:59:40.090  INFO 944 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-04-20 15:59:40.090  INFO 944 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1738 ms
    2022-04-20 15:59:40.216  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2022-04-20 15:59:40.429  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2022-04-20 15:59:40.443  INFO 944 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;
    2022-04-20 15:59:40.621  INFO 944 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-04-20 15:59:40.695  INFO 944 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.32.Final
    2022-04-20 15:59:40.860  INFO 944 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
    2022-04-20 15:59:40.992  INFO 944 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-04-20 15:59:41.692  INFO 944 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-04-20 15:59:41.705  INFO 944 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-04-20 15:59:42.099  WARN 944 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-04-20 15:59:42.292  INFO 944 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2604940, org.springframework.security.web.context.SecurityContextPersistenceFilter@467421cc, org.springframework.security.web.header.HeaderWriterFilter@6c167296, org.springframework.security.web.authentication.logout.LogoutFilter@2487b621, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3fe3ebb3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@28521ed5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@28c00acd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e564c78, org.springframework.security.web.session.SessionManagementFilter@1256925b, org.springframework.security.web.access.ExceptionTranslationFilter@5afa0b1a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4c678a1f]
    2022-04-20 15:59:42.816  INFO 944 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-04-20 15:59:42.858  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2022-04-20 15:59:42.871  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 4.931 seconds (JVM running for 5.674)
    2022-04-20 15:59:43.214  INFO 944 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:43.215  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:43.216  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
    2022-04-20 15:59:43.828  WARN 944 --- [nio-8881-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void recipes.Controller.register(recipes.entites.User): [Field error in object &#39;user&#39; on field &#39;username&#39;: rejected value [Test3@testcom]; codes [Pattern.user.username,Pattern.username,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.username,username]; arguments []; default message [username],[Ljavax.validation.constraints.Pattern$Flag;@1a8b6126,.+@.+\..+]; default message [must match &quot;.+@.+\..+&quot;]] ]
    2022-04-20 15:59:43.838  WARN 944 --- [nio-8881-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void recipes.Controller.register(recipes.entites.User): [Field error in object &#39;user&#39; on field &#39;username&#39;: rejected value [Test4test.com]; codes [Pattern.user.username,Pattern.username,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.username,username]; arguments []; default message [username],[Ljavax.validation.constraints.Pattern$Flag;@1a8b6126,.+@.+\..+]; default message [must match &quot;.+@.+\..+&quot;]] ]
    2022-04-20 15:59:43.848  WARN 944 --- [nio-8881-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void recipes.Controller.register(recipes.entites.User): [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [Test555]; codes [Length.user.password,Length.password,Length.java.lang.String,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password],2147483647,8]; default message [length must be between 8 and 2147483647]] ]
    2022-04-20 15:59:43.857  WARN 944 --- [io-8881-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void recipes.Controller.register(recipes.entites.User): [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [        ]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password]]; default message [must not be blank]] ]
    2022-04-20 15:59:44.899  INFO 944 --- [       Thread-5] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-04-20 15:59:44.903  INFO 944 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2022-04-20 15:59:44.945  INFO 944 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-04-20 15:59:44.981  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17.0.1 on Fractal with PID 944 (started by Fractal in D:\RepositoryRoadToProfession\Recipes\Recipes\task)
    2022-04-20 15:59:44.981  INFO 944 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2022-04-20 15:59:45.247  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-04-20 15:59:45.255  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 7 ms. Found 2 JPA repository interfaces.
    2022-04-20 15:59:45.340  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2022-04-20 15:59:45.341  INFO 944 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-04-20 15:59:45.341  INFO 944 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-04-20 15:59:45.381  INFO 944 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-04-20 15:59:45.381  INFO 944 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 397 ms
    2022-04-20 15:59:45.424  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2022-04-20 15:59:45.436  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2022-04-20 15:59:45.436  INFO 944 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;
    2022-04-20 15:59:45.475  INFO 944 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-04-20 15:59:45.479  INFO 944 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-04-20 15:59:45.561  INFO 944 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-04-20 15:59:45.561  INFO 944 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-04-20 15:59:45.631  WARN 944 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-04-20 15:59:45.661  INFO 944 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@651bec9a, org.springframework.security.web.context.SecurityContextPersistenceFilter@6b9ce7a3, org.springframework.security.web.header.HeaderWriterFilter@71739267, org.springframework.security.web.authentication.logout.LogoutFilter@13a35d3b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@65145fb7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@17931cc0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7a9e44ff, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@76d4e1af, org.springframework.security.web.session.SessionManagementFilter@6d810e94, org.springframework.security.web.access.ExceptionTranslationFilter@219bad15, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@72499396]
    2022-04-20 15:59:45.813  INFO 944 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-04-20 15:59:45.832  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2022-04-20 15:59:45.838  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 0.88 seconds (JVM running for 8.641)
    2022-04-20 15:59:45.844  INFO 944 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:45.845  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:45.848  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms
    2022-04-20 15:59:48.225  WARN 944 --- [io-8881-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;name&#39;: rejected value [null]; codes [NotBlank.recipe.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.name,name]; arguments []; default message [name]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.290  WARN 944 --- [nio-8881-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;category&#39;: rejected value [null]; codes [NotBlank.recipe.category,NotBlank.category,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.category,category]; arguments []; default message [category]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.355  WARN 944 --- [nio-8881-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;description&#39;: rejected value [null]; codes [NotBlank.recipe.description,NotBlank.description,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.description,description]; arguments []; default message [description]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.419  WARN 944 --- [nio-8881-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;ingredients&#39;: rejected value [[]]; codes [Size.recipe.ingredients,Size.ingredients,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.ingredients,ingredients]; arguments []; default message [ingredients],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:48.484  WARN 944 --- [nio-8881-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;directions&#39;: rejected value [[]]; codes [Size.recipe.directions,Size.directions,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.directions,directions]; arguments []; default message [directions],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:48.550  WARN 944 --- [nio-8881-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;name&#39;: rejected value [  ]; codes [NotBlank.recipe.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.name,name]; arguments []; default message [name]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.639  WARN 944 --- [nio-8881-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;category&#39;: rejected value [  ]; codes [NotBlank.recipe.category,NotBlank.category,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.category,category]; arguments []; default message [category]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.705  WARN 944 --- [nio-8881-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;description&#39;: rejected value [  ]; codes [NotBlank.recipe.description,NotBlank.description,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.description,description]; arguments []; default message [description]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.770  WARN 944 --- [nio-8881-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;ingredients&#39;: rejected value [[]]; codes [Size.recipe.ingredients,Size.ingredients,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.ingredients,ingredients]; arguments []; default message [ingredients],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:48.838  WARN 944 --- [nio-8881-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public java.lang.String recipes.Controller.saveNewRecipe(recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;directions&#39;: rejected value [[]]; codes [Size.recipe.directions,Size.directions,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.directions,directions]; arguments []; default message [directions],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:48.903  WARN 944 --- [io-8881-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;name&#39;: rejected value [null]; codes [NotBlank.recipe.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.name,name]; arguments []; default message [name]]; default message [must not be blank]] ]
    2022-04-20 15:59:48.976  WARN 944 --- [io-8881-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;category&#39;: rejected value [null]; codes [NotBlank.recipe.category,NotBlank.category,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.category,category]; arguments []; default message [category]]; default message [must not be blank]] ]
    2022-04-20 15:59:49.045  WARN 944 --- [nio-8881-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;description&#39;: rejected value [null]; codes [NotBlank.recipe.description,NotBlank.description,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.description,description]; arguments []; default message [description]]; default message [must not be blank]] ]
    2022-04-20 15:59:49.111  WARN 944 --- [nio-8881-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;ingredients&#39;: rejected value [[]]; codes [Size.recipe.ingredients,Size.ingredients,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.ingredients,ingredients]; arguments []; default message [ingredients],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:49.177  WARN 944 --- [nio-8881-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;directions&#39;: rejected value [[]]; codes [Size.recipe.directions,Size.directions,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.directions,directions]; arguments []; default message [directions],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:49.242  WARN 944 --- [nio-8881-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;name&#39;: rejected value [  ]; codes [NotBlank.recipe.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.name,name]; arguments []; default message [name]]; default message [must not be blank]] ]
    2022-04-20 15:59:49.308  WARN 944 --- [nio-8881-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;category&#39;: rejected value [  ]; codes [NotBlank.recipe.category,NotBlank.category,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.category,category]; arguments []; default message [category]]; default message [must not be blank]] ]
    2022-04-20 15:59:49.375  WARN 944 --- [nio-8881-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;description&#39;: rejected value [  ]; codes [NotBlank.recipe.description,NotBlank.description,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.description,description]; arguments []; default message [description]]; default message [must not be blank]] ]
    2022-04-20 15:59:49.440  WARN 944 --- [nio-8881-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;ingredients&#39;: rejected value [[]]; codes [Size.recipe.ingredients,Size.ingredients,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.ingredients,ingredients]; arguments []; default message [ingredients],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:49.506  WARN 944 --- [nio-8881-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [1] in public org.springframework.http.ResponseEntity recipes.Controller.updateRecipeById(java.lang.Long,recipes.entites.Recipe): [Field error in object &#39;recipe&#39; on field &#39;directions&#39;: rejected value [[]]; codes [Size.recipe.directions,Size.directions,Size.java.util.List,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [recipe.directions,directions]; arguments []; default message [directions],100,1]; default message [size must be between 1 and 100]] ]
    2022-04-20 15:59:50.060  INFO 944 --- [       Thread-7] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-04-20 15:59:50.062  INFO 944 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
    2022-04-20 15:59:50.101  INFO 944 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-04-20 15:59:50.154  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17.0.1 on Fractal with PID 944 (started by Fractal in D:\RepositoryRoadToProfession\Recipes\Recipes\task)
    2022-04-20 15:59:50.154  INFO 944 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2022-04-20 15:59:50.367  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-04-20 15:59:50.373  INFO 944 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6 ms. Found 2 JPA repository interfaces.
    2022-04-20 15:59:50.440  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8881 (http)
    2022-04-20 15:59:50.440  INFO 944 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-04-20 15:59:50.441  INFO 944 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-04-20 15:59:50.471  INFO 944 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-04-20 15:59:50.471  INFO 944 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 313 ms
    2022-04-20 15:59:50.502  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
    2022-04-20 15:59:50.511  INFO 944 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
    2022-04-20 15:59:50.512  INFO 944 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;
    2022-04-20 15:59:50.544  INFO 944 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-04-20 15:59:50.549  INFO 944 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-04-20 15:59:50.607  INFO 944 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-04-20 15:59:50.607  INFO 944 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-04-20 15:59:50.675  WARN 944 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-04-20 15:59:50.700  INFO 944 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@386cc1c4, org.springframework.security.web.context.SecurityContextPersistenceFilter@16488ed7, org.springframework.security.web.header.HeaderWriterFilter@36361951, org.springframework.security.web.authentication.logout.LogoutFilter@f9d7d3f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@43ef1243, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ac2772d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c380db5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e3c5ecc, org.springframework.security.web.session.SessionManagementFilter@24c8bc1e, org.springframework.security.web.access.ExceptionTranslationFilter@6149adee, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5b1e5366]
    2022-04-20 15:59:50.846  INFO 944 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-04-20 15:59:50.858  INFO 944 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;
    2022-04-20 15:59:50.863  INFO 944 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 0.735 seconds (JVM running for 13.666)
    2022-04-20 15:59:50.867  INFO 944 --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:50.868  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-04-20 15:59:50.869  INFO 944 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
  time: Wed, 20 Apr 2022 12:59:51 UTC
record: -1
